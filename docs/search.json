[{"path":[]},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"/articles/aqua.html","id":"data-and-problem-context","dir":"Articles","previous_headings":"","what":"Data and Problem Context","title":"Modulating pH in an Aquaculture Microbiome","text":"Sometimes interested modeling ecosystem shifts continuously modulated input, rather abrupt shock vignette explores transfer function models can adapted setting. re-analyze data , studied microbiome associated eel aquaculture. Eels grown five different tanks, microbiomes tank sequenced daily 120 days. study gathered variety tank-level environmental characteristics, including oxygenation pH. noticeable shift pH occurred several tanks midway study. ’ll quantify effect use transfer functions simulate hypothetical trajectories continuously-modulated pH changes. First, let’s load packages used vignette. block defining th just sets ggplot2 color themes. ’ve hosted lightly preprocessed versions raw data following figshare links. ’ll use pH column interventions input \\(w_{nt}\\) transfer function. Based “long” data.frames, can create structured ts object. “wide,” sample-level matrices convenient autoregressive modeling. missing timepoints original data, linearly interpolate . Finally, original publication, two tanks seem noticeably different behavior rest. also clear shift pH days 40 - 50, ’ll concentrate remainder analysis just tanks.","code":"library(mbtransfer) library(glue) library(patchwork) library(tidyverse) th <- theme_bw() +   theme(     panel.grid.minor = element_blank(),     panel.background = element_rect(fill = \"#f7f7f7\"),     panel.border = element_rect(fill = NA, color = \"#0c0c0c\", linewidth = 0.6),     axis.text = element_text(size = 8),     axis.title = element_text(size = 12),     legend.position = \"bottom\"   ) theme_set(th) set.seed(20230524) reads <- read_csv(\"https://figshare.com/ndownloader/files/40357894/reads.csv\") |>   column_to_rownames(\"sample\") samples <- read_csv(\"https://figshare.com/ndownloader/files/40357897/samples.csv\") subject <- read_csv(\"https://figshare.com/ndownloader/files/40357891/subject.csv\") interventions <- read_csv(\"https://figshare.com/ndownloader/files/40357888/interventions.csv\") |>   column_to_rownames(\"sample\") ts <- reads |>   ts_from_dfs(interventions, samples, subject) |>   interpolate()  ts <- ts[1:3] ts #> # A ts_inter object | 128 taxa | 3 subjects | 128.00 ± 0.00 timepoints: #>  #> T1: #>        T1_T1 T1_T2 T1_T3 T1_T4   #> X_0001 7.038 7.458 7.937 7.937 … #> X_0002 9.365 9.234 8.682 8.682 … #> X_0003 4.179     0     0     0 … #> X_0005 9.236 9.127 8.578 8.578 … #>            ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> T2: #>        T2_T1 T2_T2 T2_T3 T2_T4   #> X_0001 7.122 8.052 8.827 7.743 … #> X_0002 9.283 8.785 9.389 9.268 … #> X_0003 2.479     0     0     0 … #> X_0005 9.022  8.55 9.377 9.351 … #>            ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> T3: #>        T3_T1 T3_T2 T3_T3 T3_T4   #> X_0001 7.076 3.841   8.5 9.756 … #> X_0002 9.149 6.992 6.578 8.256 … #> X_0003 2.328     0 4.703 4.976 … #> X_0005 9.707 9.365 9.483 9.637 … #>            ⋮     ⋮     ⋮     ⋮ ⋱"},{"path":"/articles/aqua.html","id":"prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"Modulating pH in an Aquaculture Microbiome","text":"’ll evaluate forecasting performance model trained two tanks1. block , train model using first 96 (128) days within tank. , forecast remaining 32 days. can evaluate performance held days plotting truth forecast. Performance generally better abundant species, short time horizons \\(h\\) easier predict long ones.","code":"ts_missing <- subset_values(ts, 1:96) fit <- mbtransfer(ts, P = 4, Q = 4, alpha = 1e-3, eta = 1e-2) ts_pred <- predict(fit, ts_missing) reshape_preds(ts, ts_pred, 3) |>   filter(h > 93, h < 99) |>   ggplot() +   geom_abline(slope = 1, col = \"#400610\") +   geom_point(aes(y, y_hat), size = .7, alpha = .6) +   facet_grid(factor(quantile, rev(levels(quantile))) ~ h, scales = \"free_y\") +   labs(x = expression(y), y = expression(hat(y))) +   scale_x_continuous(expand = c(0, 0), n.breaks = 3) +   scale_y_continuous(expand = c(0, 0), n.breaks = 3) +   theme(     axis.text = element_text(size = 10),     panel.spacing = unit(0, \"line\"),     strip.text.y = element_text(angle = 0, size = 12),     strip.text.x = element_text(angle = 0, size = 12),     legend.title = element_text(size = 14),     legend.text = element_text(size = 11),   )"},{"path":"/articles/aqua.html","id":"attribution-analysis-selecting-important-taxa","dir":"Articles","previous_headings":"Prediction","what":"Attribution Analysis: Selecting Important Taxa","title":"Modulating pH in an Aquaculture Microbiome","text":"taxa sensitive changes pH? Since trained transfer model using pH input, can simulate new trajectories hypothetical pH shifts. First, create counterfactual two pH values – one acidic one (2) another basic one (9). just device focusing attention taxa seem affected pH – ’ll later simulate continuous gradient pH values. Note counterfactuals ws specify perturbations, even though ’re really interested one . ’ve set 38 typical value series across observed data. Let’s check mirror statistics associated taxa. ’re showing 50 taxa largest mirror statistics, even among , don’t seem affected pH strongly enough flagged \\(q = 0.2\\) false discovery rate control level (default used mbtransfer, can modified select_taxa function).  plausible selections? One simple check compare taxon’s abundance pH across time series. ’ve sorted taxa according strength association according mirror statistic. Note , though always compute simple \\(R^2\\) scatterplots, test statistics derived suspect, since samples correlated time. effective sample size large number points plot might lead believe. transfer function + mirror testing approach accounts temporal dependence, main reason going additional modeling effort.  Next, ’ll see taxa vary response intermediate shifts pH, just acidic basic extremes considered . , need richer collection counterfactuals. ws vary 2 9, assume shift lasts 10 time steps. predict method mbtransfer models looks difference interventions values slots, contain environmental input microbial response variables. Timepoints present interventions values used forecast new values. mind, can create dataset allow us simulate trajectories ws. idea replace interventions starting time L counterfactual ws remove actually observed values following timepoint. steps encapsulated counterfactual_ts function . usually use function compare two pairs counterfactuals. Since actually generating two, ’ll loop function place dummy third argument (usually define second, ts2 time counterfactual time series). Finally, predict series hypothetical pH interventions. ’ve visualized taxa whose trajectories shifted different degrees according strength intervention. effects seems essentially additive. principle, response “shapes” change different pH, result potential feedback loops taxa. However, seem case data.","code":"ws <- steps(c(\"pH\" = TRUE, \"AS\" = FALSE), lengths = 4, L = 4) |>   map(~ 7 * . + 2) ws[[1]][\"AS\", ] <- 38 ws[[2]][\"AS\", ] <- 38  # staxa <- select_taxa(ts, ws[[1]], ws[[2]], \\(x) mbtransfer(x, 4, 4, alpha = 1e-3, eta = 0.01), n_splits = 25) staxa <- readRDS(url(\"https://github.com/krisrs1128/mbtransfer_demo/raw/main/staxa-aqua.rds\"))  taxa <- staxa$ms |>   select(multisplit, m, lag) %>%   split(.$lag) %>%   map(~ split(., .$multisplit) %>% map(~ pull(., m))) |>   map(~ which(multiple_data_splitting(., q = 0.2))) vis_taxa <- staxa$ms |>   group_by(taxon) |>   summarise(m = mean(m)) |>   slice_max(m, n = 50) |>   pull(taxon)  staxa$ms |>   filter(taxon %in% vis_taxa) |>   mutate(     taxon = taxa(ts)[taxon],     lag = as.factor(lag),     selected = ifelse(taxon %in% unlist(staxa$taxa), \"Selected\", \"Unselected\")   ) |>   ggplot() +   geom_hline(yintercept = 0, linewidth = 2, col = \"#d3d3d3\") +   geom_boxplot(aes(reorder(taxon, -m), m, fill = lag, col = lag), alpha = 0.8) +   facet_grid(. ~ selected, scales = \"free_x\", space = \"free_x\") +   scale_fill_manual(values = c(\"#c6dbef\", \"#6baed6\", \"#2171b5\", \"#084594\")) +   scale_color_manual(values = c(\"#c6dbef\", \"#6baed6\", \"#2171b5\", \"#084594\")) +   labs(y = expression(M[j]), x = \"Taxon\") +   theme(axis.text.x = element_text(angle = 90, size = 11)) focus_taxa <- unlist(map(staxa$taxa, ~ c(.)))  taxa_order <- staxa$ms |>   group_by(taxon) |>   summarise(mean_m = mean(m)) |>   arrange(-mean_m) |>   pull(taxon)  pivot_ts(ts) |>   mutate(taxon = factor(taxon, levels = taxa(ts)[taxa_order])) |>   filter(taxon %in% focus_taxa, taxon %in% taxa(ts)[vis_taxa]) |>   ggplot() +   geom_point(aes(pH, value), alpha = 0.4, size = 0.3) +   facet_wrap(~taxon, ncol = 8) L <- 42 ws <- list() plateaus <- seq(2, 9, length.out = 10) for (p in seq_along(plateaus)) {   ws[[p]] <- matrix(38, nrow = 2, ncol = L / 2)   colnames(ws[[p]]) <- glue(\"t{seq_len(L/2)}\")   rownames(ws[[p]]) <- c(\"pH\", \"AS\")   ws[[p]][1, ] <- rep(plateaus[p], L / 2) } sim_ts_ <- list() for (i in seq_along(ws)) {   sim_ts_[[i]] <- counterfactual_ts(ts, ws[[i]], ws[[i]], start_ix = L)$ts1 } pal <- c(\"#cbd8e8\", \"#becbdc\", \"#b1bed0\", \"#a4b2c4\", \"#97a5b8\", \"#8b99ac\", \"#808da0\", \"#748193\", \"#697587\", \"#5e697b\")  sim_ts <- map(sim_ts_, ~ predict(fit, .)) |>   map_dfr(pivot_ts, .id = \"counterfactual\")  sim_ts |>   filter(taxon %in% focus_taxa, time > 20, time < 70) |>   mutate(     pH = factor(round(plateaus[as.integer(counterfactual)], 3)),     taxon = factor(taxon, levels = taxa(ts)[taxa_order])   ) |>   group_by(taxon, time, pH) |>   summarise(q50 = median(value)) |>   ggplot() +   geom_line(aes(time, q50, col = pH)) +   geom_vline(col = \"#c1c1c1c1\", xintercept = L, linewidth = 1) +   facet_wrap(~taxon, scales = \"free_y\") +   scale_fill_manual(values = pal) +   scale_color_manual(values = pal) vis_taxa2 <- focus_taxa[seq(1, length(focus_taxa), by = 9)]  p1 <- pivot_ts(ts) |>   mutate(taxon = factor(taxon, levels = taxa(ts)[taxa_order])) |>   filter(taxon %in% vis_taxa2) |>   ggplot() +   geom_point(aes(pH, value), alpha = 0.4, size = 0.3) +   labs(x = \"pH\", y = \"Abundance\", title = \"(a) pH vs. Abundance\") +   facet_wrap(~taxon, scales = \"free_y\", nrow = 1) +   theme(plot.margin = unit(c(0, 0, 0, 0), \"null\"))  p2 <- sim_ts |>   filter(taxon %in% vis_taxa2, time > 20, time < 70) |>   mutate(     pH = factor(round(plateaus[as.integer(counterfactual)], 3)),     taxon = factor(taxon, levels = taxa(ts)[taxa_order])   ) |>   group_by(taxon, time, pH) |>   summarise(q50 = median(value)) |>   ggplot() +   geom_line(aes(time, q50, col = pH)) +   geom_vline(col = \"#c1c1c1c1\", xintercept = L, linewidth = 1) +   facet_grid(. ~ taxon) +   scale_fill_manual(values = pal) +   labs(x = \"Time\", y = \"Median Abundance\", title = \"(b) Counterfactual Trajectories\") +   scale_color_manual(values = pal)  p1 / p2 +   plot_layout(heights = c(1, 2), guides = \"collect\") &   theme(legend.position = \"right\")"},{"path":"/articles/diet.html","id":"data-and-problem-context","dir":"Articles","previous_headings":"","what":"Data and Problem Context","title":"Diet Interventions as Ecological Shifts","text":"(David, Maurice, Carmody, Gootenberg, Button, Wolfe, Ling, Devlin, Varma, Fischbach, Biddinger, Dutton, Turnbaugh, 2013) one first studies draw attention way human microbiomes quickly respond changes host behavior. implications lot think microbiome health disease – wouldn’t make sense try engineering/manipulating human microbiomes sensitive external change study found. study includes 20 participates, half assigned “plant” “animal” diet interventions. Samples collected two weeks, (must quite memorable…) five consecutive days study, participants instructed eat foods intervention diet type. think microbiome ecosystem, dramatic shift diet likened extreme environmental event, like flood wildfire. question microbiome changed response – taxa () affected, long intervention effects last. diving data, let’s load libraries. th definition just used customize default ggplot2 figure appearance. block reads data. lightly processed versions data hosted MITRE repository (Bogart, Creswell, Gerber, 2019). ’ve selected features used analysis, reshaped data format can used ts_from_dfs function. Next, unify read counts, subject variables, intervention status ts_inter class. mbtransfer’s functions expect data structured according class. interpolate timepoints onto daily grid. satisfying transformation, since can create impression much noise samples. However, common practice (e.g., rCitep(bib, “RuizPerez2019DynamicBN”)`), better entirely ignoring variation gaps samples. modeling, let’s visualize raw data. plot shows interpolated series seven abundant taxa. subjects, clear, nearly universal affect – e.g., OTU000011 clearly depleted Animal diet. taxa ambiguous effects (OTU000019. increase plant?), seem potentially specialized subpopulations (e.g., OTU000003 Animal). transfer function models help us provide precise characterization intervention effects, together uncertainty quantification.","code":"library(mbtransfer) library(tidyverse) library(glue) library(tidymodels) library(patchwork) th <- theme_bw() +   theme(     panel.grid.minor = element_blank(),     panel.background = element_rect(fill = \"#f7f7f7\"),     panel.border = element_rect(fill = NA, color = \"#0c0c0c\", linewidth = 0.6),     axis.text = element_text(size = 8),     axis.title = element_text(size = 12),     legend.position = \"bottom\"   ) theme_set(th) set.seed(20230524) subject <- read_csv(\"https://figshare.com/ndownloader/files/40275934/subject.csv\") interventions <- read_csv(\"https://figshare.com/ndownloader/files/40279171/interventions.csv\") |>   column_to_rownames(\"sample\") reads <- read_csv(\"https://figshare.com/ndownloader/files/40279108/reads.csv\") |>   column_to_rownames(\"sample\") samples <- read_csv(\"https://figshare.com/ndownloader/files/40275943/samples.csv\") ts <- as.matrix(reads) |>   ts_from_dfs(interventions, samples, subject) |>   interpolate(method = \"linear\")  ts #> # A ts_inter object | 191 taxa | 20 subjects | 14.40 ± 1.56 timepoints: #>  #> Plant5: #>           Plant5_T1 Plant5_T2 Plant5_T3 Plant5_T4   #> Otu000001    10.218     9.149     8.392     9.399 … #> Otu000002         0         0      5.15     8.454 … #> Otu000003     6.413         0     3.509      3.57 … #> Otu000004      7.46     6.997     6.855      8.04 … #>                   ⋮         ⋮         ⋮         ⋮ ⋱ #>  #> Plant7: #>           Plant7_T1 Plant7_T2 Plant7_T3 Plant7_T4   #> Otu000001     9.311     9.368     8.052     9.734 … #> Otu000002         0         0     4.838     1.844 … #> Otu000003     7.201     7.575     5.674     7.127 … #> Otu000004     9.375     9.591     8.313     9.435 … #>                   ⋮         ⋮         ⋮         ⋮ ⋱ #>  #> Plant4: #>           Plant4_T1 Plant4_T2 Plant4_T3 Plant4_T4   #> Otu000001     8.176     8.344     8.512     8.398 … #> Otu000002     4.545     2.272         0         0 … #> Otu000003     8.471     8.349     8.226     7.954 … #> Otu000004         0         0         0         0 … #>                   ⋮         ⋮         ⋮         ⋮ ⋱ #>  #> and 17 more subjects. values_df <- pivot_ts(ts) top_taxa <- values_df |>   group_by(taxon) |>   summarise(mean = mean(value)) |>   slice_max(mean, n = 7) |>   pull(taxon)  values_df |>   group_by(taxon) |>   mutate(value = rank(value) / n()) |>   interaction_hm(top_taxa, \"diet\")"},{"path":"/articles/diet.html","id":"prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"Diet Interventions as Ecological Shifts","text":"can get formal statistical inferences, let’s see accurate transfer function model – point attempting interpret effects model doesn’t fit data! First, going remove intervention group label. mbtransfer include column subject_data(ts) regression model, since already record intervention state interventions slot ts object, including feature group label doesn’t add real information. ’ll first fit transfer function model using first eight, pre-intervention timepoints every subject. ’s possible model might overfit (relatively small) sample, ’s still usually helpful compare --sample prediction performance. poor performance even within -sample setting might mean assumed model class rich enough. block instead trains five subjects intervention group makes predictions held . Let’s compare two types prediction performance. ’ll consider several time horizons – using sequence \\(\\hat{y}_{t + h}\\) make predictions \\(\\hat{y}_{t + h + 1}\\) – distinguish taxa lower/higher overall abundance. predictions seem reasonable higher abundance taxa. However, blue points spread purple bottom panels, meaning model overfit lower abundance taxa. perhaps surprising: core microbiome might shared across 20 participants, person--person variability might high us make reasonable generalizations less abundant taxa.  can make interpretation precise calculating --sample correlations across panels. Correlation can vary substantially across lag quantile abundance, though, ranging \\(\\hat{\\rho} = 0.148\\) 0.578. contrast, within-subject forecasts much better, ranging 0.725 0.896.","code":"subject_data(ts) <- subject_data(ts) |>   select(-diet) fits <- list() ts_preds <- list()  fits[[\"in-sample\"]] <- mbtransfer(ts, P = 2, Q = 2) ts_missing <- subset_values(ts, 1:8) ts_preds[[\"in-sample\"]] <- predict(fits[[\"in-sample\"]], ts_missing) fits[[\"out-of-sample\"]] <- mbtransfer(ts[c(1:5, 11:15)], P = 2, Q = 2) ts_preds[[\"out-of-sample\"]] <- predict(fits[[\"out-of-sample\"]], ts_missing[c(6:10, 16:20)]) reshaped_preds <- map_dfr(ts_preds, ~ reshape_preds(ts, .), .id = \"generalization\") |>   filter(h > 0, h < 6)  reshaped_preds |>   mutate(h = glue(\"lag {h}\")) |>   ggplot() +   geom_abline(slope = 1, col = \"#400610\") +   geom_point(aes(y, y_hat, col = generalization), size = .7, alpha = .6) +   facet_grid(factor(quantile, rev(levels(quantile))) ~ h, scales = \"free_y\") +   labs(x = expression(y), y = expression(hat(y)), col = \"Generalization\") +   scale_x_continuous(expand = c(0, 0), n.breaks = 3) +   scale_y_continuous(expand = c(0, 0), n.breaks = 3) +   scale_color_manual(values = c(\"#A65883\", \"#6593A6\")) +   guides(\"color\" = guide_legend(override.aes = list(size = 4, alpha = 1))) +   theme(     axis.text = element_text(size = 10),     panel.spacing = unit(0, \"line\"),     strip.text.y = element_text(angle = 0, size = 12),     strip.text.x = element_text(angle = 0, size = 12),     legend.title = element_text(size = 14),     legend.text = element_text(size = 11),   ) reshaped_preds |>   group_by(h, quantile, generalization) |>   summarise(correlation = round(cor(y, y_hat), 4)) |>   pivot_wider(names_from = \"generalization\", values_from = \"correlation\") |>   arrange(desc(quantile), h) #> # A tibble: 20 × 4 #> # Groups:   h, quantile [20] #>        h quantile     `in-sample` `out-of-sample` #>    <dbl> <fct>              <dbl>           <dbl> #>  1     1 (3.65,9.44]        0.896           0.590 #>  2     2 (3.65,9.44]        0.835           0.489 #>  3     3 (3.65,9.44]        0.816           0.427 #>  4     4 (3.65,9.44]        0.807           0.474 #>  5     5 (3.65,9.44]        0.822           0.458 #>  6     1 (1.95,3.65]        0.866           0.582 #>  7     2 (1.95,3.65]        0.798           0.421 #>  8     3 (1.95,3.65]        0.734           0.250 #>  9     4 (1.95,3.65]        0.728           0.373 #> 10     5 (1.95,3.65]        0.755           0.332 #> 11     1 (0.391,1.95]       0.855           0.424 #> 12     2 (0.391,1.95]       0.795           0.442 #> 13     3 (0.391,1.95]       0.746           0.161 #> 14     4 (0.391,1.95]       0.725           0.178 #> 15     5 (0.391,1.95]       0.723           0.180 #> 16     1 [0,0.391]          0.845           0.327 #> 17     2 [0,0.391]          0.828           0.381 #> 18     3 [0,0.391]          0.735           0.150 #> 19     4 [0,0.391]          0.762           0.271 #> 20     5 [0,0.391]          0.740           0.262"},{"path":"/articles/diet.html","id":"attribution-analysis-selecting-important-taxa","dir":"Articles","previous_headings":"","what":"Attribution Analysis: Selecting Important Taxa","title":"Diet Interventions as Ecological Shifts","text":"Let’s see draw inferences trained model (spirit (Efron, 2020)). inference procedure based repeated data splitting, place high uncertainty around effects reproduce across different subsets subjects, especially useful check, considering potential overfitting saw . block defines counterfactual interventions using steps helper function. first argument specifies perturbations generate counterfactual, second gives candidate intervention lengths, last gives length overall output sequence. block runs instantiation mirror statistics FDR controlling algorithm (Dai, Lin, Xing, Liu, 2020). ’ll contrasting counterfactual -intervention long animal-intervention ws. default, ’ll control FDR \\(q\\)-value 0.2, meaning , average, fifth “discoveries” expected false positives. can modify choice using qvalue argument select_taxa. chosen large value n_splits, since higher values generally lead better power. However, takes time, can reset value n_splits smaller value still work rest vignette (many taxa still easily detectable). addition selected set taxa, function returns mirror statistics taxon. statistics larger taxa clearer sensitivity intervention. ’ve chosen 50 taxa largest average mirror statistics visualization (whether large enough considered discoveries). figure shows mirror statistics taxon lag. general, effects build gradually across lags included model (\\(Q = 3\\)). gives evidence considering instantaneous intervention effects sufficient (example, suggests generalized Lotka Volterra likely underfit).","code":"ws <- steps(c(\"Plant\" = TRUE, \"Animal\" = FALSE), lengths = 1:4, L = 4) |>   c(steps(c(\"Plant\" = FALSE, \"Animal\" = TRUE), lengths = 1:4, L = 4)) ws[c(1, 2, 10)] #> [[1]] #>        t1 t2 t3 t4 #> Plant   0  0  0  0 #> Animal  0  0  0  0 #>  #> [[2]] #>        t1 t2 t3 t4 #> Plant   1  0  0  0 #> Animal  0  0  0  0 #>  #> [[3]] #>        t1 t2 t3 t4 #> Plant   0  0  0  0 #> Animal  1  1  1  1 #staxa <- select_taxa(ts, ws[[1]], ws[[10]],  \\(x) mbtransfer(x, 2, 2), n_splits = 25) staxa <- readRDS(url(\"https://github.com/krisrs1128/mbtransfer_demo/raw/main/staxa-diet.rds\")) staxa$ms <- staxa$ms |>   mutate(     taxon = taxa(ts)[taxon],     lag = as.factor(lag)   )  vis_otus <- staxa$ms |>   group_by(taxon) |>   summarise(m = mean(m)) |>   slice_max(m, n = 100) |>   pull(taxon)  focus_taxa <- unlist(map(staxa$taxa, ~ c(.))) staxa$ms |>   filter(taxon %in% vis_otus) |>   mutate(selected = ifelse(taxon %in% focus_taxa, \"Selected\", \"Unselected\")) |>   ggplot() +   geom_hline(yintercept = 0, linewidth = 2, col = \"#d3d3d3\") +   geom_boxplot(aes(reorder(taxon, -m), m, fill = lag, col = lag), alpha = 0.8) +   facet_grid(. ~ selected, scales = \"free_x\", space = \"free_x\") +   scale_fill_manual(values = c(\"#c6dbef\", \"#6baed6\", \"#2171b5\", \"#084594\")) +   scale_color_manual(values = c(\"#c6dbef\", \"#6baed6\", \"#2171b5\", \"#084594\")) +   labs(y = expression(M[j]), x = \"Taxon\") +   theme(axis.text.x = element_text(angle = 90, size = 11))"},{"path":"/articles/diet.html","id":"comparing-counterfactual-trajectories","dir":"Articles","previous_headings":"","what":"Comparing Counterfactual Trajectories","title":"Diet Interventions as Ecological Shifts","text":"Mirror statistics tell us taxa respond intervention, don’t tell us respond. , ’s worth simulating forward different counterfactuals. counterfactual_ts function helps simulation task. Given observed series (ts) counterfactuals (ws), insert different counterfactuals starting start_ix. imaginary ts objects, fill predictions every timepoint appears column interventions values. sim_ts object includes simulated series every subject. can understand marginal effects summarizing across subjects. ribbon_data function computes first third quartiles difference subject’s hypothetical series. intervention, two series expected equal, strong intervention effect, expect series diverge intervention appears. can now visualize trajectories selected taxa. can organize taxa similar trajectory differences placed next one . , projecting onto first axis PCA. visualization suggests strongly affected taxa experience increases following intervention, intervention often takes several days reaches largest magnitude (consistent increasing mirror statistics across lags). Surprisingly, first third quartiles always agree one another. suggests model focused effects \\(w_{t}\\), initial community profiles \\(y_{t}\\) play role model’s reduction.  spirit progressive disclosure data visualization, can plot raw data associated selected taxa. effects seem consistent estimated trajectories. weaker effects seem consequence subject--subject heterogeneity. example, subjects, OTU000142 increases intervention period (following day 0). However, subjects delayed effects, others don’t seem effect . Note trajectory visualization much compact full heatmap view – sifting heatmaps like taxon involved ad-hoc effort. first fitting transfer function model, ’re able quickly narrow promising taxa. Moreover, formal guarantees many selected taxa false positives. Overall, recommend overall workflow first evaluates taxa using formal models investigates subject-level variation using  can merge two figures ’s easier compare simulated real data. ’ll focus every third taxon original display.","code":"ws <- steps(c(\"Plant\" = TRUE, \"Animal\" = FALSE), lengths = 1:4, L = 8) |>   c(steps(c(\"Plant\" = FALSE, \"Animal\" = TRUE), lengths = 1:4, L = 8))  sim_ts <- counterfactual_ts(ts, ws[[1]], ws[[10]], start_ix = 4) |>   map(~ predict(fits[[\"in-sample\"]], .)) rdata <- ribbon_data(sim_ts[[2]], sim_ts[[1]], focus_taxa) rdata #> # A tibble: 840 × 5 #> # Groups:   taxon [56] #>    taxon      time q_lower median q_upper #>    <chr>     <dbl>   <dbl>  <dbl>   <dbl> #>  1 Otu000002    -5  0      0       0      #>  2 Otu000002    -4  0      0       0      #>  3 Otu000002    -3  0      0       0      #>  4 Otu000002    -2  0      0       0      #>  5 Otu000002    -1  0      0       0      #>  6 Otu000002     0  0.0989 0.0989  0.0989 #>  7 Otu000002     1  0.255  0.268   0.285  #>  8 Otu000002     2  0.399  0.421   0.465  #>  9 Otu000002     3  0.464  0.516   0.558  #> 10 Otu000002     4  0.315  0.346   0.385  #> # ℹ 830 more rows rdata_wide <- rdata |>   select(taxon, time, median) |>   filter(time > 0) |>   pivot_wider(names_from = time, values_from = median)  rdata_order <- rdata_wide |>   select(-taxon) %>%   recipe(~., data = .) |>   step_pca() |>   prep() |>   juice() |>   mutate(taxon = rdata_wide$taxon)  rdata |>   left_join(rdata_order) |>   ribbon_plot(reorder_var = \"1\") +   scale_y_continuous(breaks = 2) +   labs(x = \"Time\", y = \"Median Counterfactual Diference\") +   theme(     panel.spacing = unit(0, \"line\"),     axis.text.y = element_text(size = 8)   ) taxa_hm <- c(\"Otu000011\", \"Otu000095\", \"Otu000434\", \"Otu000236\", \"Otu000169\", \"Otu000017\")  hm_data <- values_df |>   filter(diet == \"Animal\") |>   group_by(taxon)  hm_data |>   mutate(     value = rank(value) / n(),     taxon = factor(taxon, levels = taxa_hm)   ) |>   interaction_hm(taxa = taxa_hm, \"diet\") +   scale_color_gradient(low = \"#eaf7f7\", high = \"#037F8C\") +   scale_fill_gradient(low = \"#eaf7f7\", high = \"#037F8C\") +   labs(x = \"Time\", y = \"Subject\", fill = \"Rank\", color = \"Rank\") focus_taxa <- rdata_order |>   arrange(`1`) |>   filter(row_number() %% 6 == 0) |>   pull(taxon)  p1 <- rdata |>   filter(taxon %in% focus_taxa) |>   left_join(rdata_order) |>   ribbon_plot(reorder_var = \"1\") +   scale_x_continuous(breaks = seq(-5, 8, by = 3)) +   scale_y_continuous(breaks = round(seq(-.2, 1, by = 0.2), 1)) +   facet_grid(. ~ reorder(taxon, `1`)) +   labs(title = \"(a) Counterfactual Difference at Interventions\", y = \"Difference\") +   theme(     panel.spacing = unit(0, \"line\"),     axis.text.x = element_text(size = 8),     axis.text.y = element_text(size = 7),     axis.title.x = element_blank(),     plot.margin = unit(c(0, 0, 0, 0), \"null\")   )  p2 <- hm_data |>   mutate(     value = rank(value) / n(),     taxon = factor(taxon, levels = focus_taxa)   ) |>   interaction_hm(taxa = focus_taxa, \"diet\") +   scale_color_gradient(low = \"#eaf7f7\", high = \"#037F8C\") +   scale_fill_gradient(low = \"#eaf7f7\", high = \"#037F8C\") +   labs(x = \"Time\", y = \"Subject\", fill = \"Rank\", color = \"Rank\", title = \"(b) Original Data\") +   theme(legend.position = \"left\")   p1 / p2 +   plot_layout(heights = c(1, 2), guides = \"collect\") &   theme(legend.position = \"right\")"},{"path":"/articles/postpartum.html","id":"data-and-problem-context","dir":"Articles","previous_headings":"","what":"Data and Problem Context","title":"Postpartum Community Remodeling","text":"birth influence composition vaginal microbiome? question first studied (Costello, DiGiulio, Robaczewska, Symul, Wong, Shaw, Stevenson, Holmes, Kwon, Relman, 2022), made data available repository. re-analyze data using mbtransfer, viewing birth intervention event capacity remodel microbial community composition. ’ll illustrate following workflow: Construct ts_inter (“time series intervention”) object, expected input main mbtransfer modeling function. Evaluate - --sample prediction performance model. Select significant taxa using mirror statistics. Visualize hypothetical trajectories significant taxa, emphasis potential interactions subject-level features. first three steps nearly parallel diet aquaculture studies discussed vignettes, third follows implementation specific problem context. construct ts_inter object, combine following datasets: reads: data.frame taxonomic compositions. Rows samples columns taxa. samples: data.frame sample-level descriptors. expected sample time columns. sample must match rownames across reads interventions. subject_data: data.frame subject-level descriptors. can used store information time varying. interventions: data.frame whose rows samples columns interventions. can either binary matrix whether given intervention (column) present sample. input series can also continuously valued – see aquaculture vignette ofr example. created datasets lightly processing raw data published repository. processing script available . Note converted subject-level data numeric variables – mbtransfer know handle factor inputs, must coded first. Note , unlike microbiome studies, data relatively taxa (29). reflects typically low diversity vaginal microbiome. Next, construct ts_inter object using ts_from_dfs function. initial form, samples evenly sampled – generally biweekly sampling, daily resolution available period immediately surrounding birth. 0 indicates birth timepoint, samples negative timepoints collected birth. method able handle nonuniform temporal sampling, unfortunately, downsample biweekly (14 day) resolution using interpolate function. Now constructed interpolated ts_inter object, can helpful visualize subject trajectories. can use pivot_ts convert ts_inter object merged data.frame, interaction_barcode creates faceted plot selected taxa. row trajectory one taxon one subject. Multiple taxa subject grouped facet (alternative groups subjects according taxa, see interaction_hm function). ’ve grouped subjects according contraception status.","code":"library(fs) library(tidyverse) library(mbtransfer) library(patchwork) library(glue) th <- theme_bw() +   theme(     panel.grid.minor = element_blank(),     panel.background = element_rect(fill = \"#f7f7f7\"),     panel.border = element_rect(fill = NA, color = \"#0c0c0c\", linewidth = 0.6),     axis.text = element_text(size = 8),     axis.title = element_text(size = 12),     legend.position = \"bottom\"   ) theme_set(th) set.seed(20230524) reads <- read_csv(\"https://figshare.com/ndownloader/files/40322782/reads.csv\") |>   column_to_rownames(\"sample\") samples <- read_csv(\"https://figshare.com/ndownloader/files/40322776/samples.csv\") subject_data <- read_csv(\"https://figshare.com/ndownloader/files/40322773/subject.csv\") interventions <- read_csv(\"https://figshare.com/ndownloader/files/40322770/interventions.csv\") |>   column_to_rownames(\"sample\") ts <- reads |>   ts_from_dfs(interventions, samples, subject_data) |>   interpolate(delta = 14, method = \"linear\")  ts #> # A ts_inter object | 29 taxa | 49 subjects | 38.82 ± 10.15 timepoints: #>  #> S10001: #>                 S10001_T1 S10001_T2 S10001_T3 S10001_T4   #> Lactobacillus      13.315    13.776    13.732    14.573 … #> Gardnerella             0         0         0         0 … #> Prevotella          5.021      5.17     6.439     0.661 … #> Bifidobacterium         0         0     5.224     0.838 … #>                         ⋮         ⋮         ⋮         ⋮ ⋱ #>  #> S10004: #>                 S10004_T1 S10004_T2 S10004_T3 S10004_T4   #> Lactobacillus       13.28    13.068    13.771    14.105 … #> Gardnerella         9.443     8.109     5.087     7.296 … #> Prevotella          7.303     6.363     7.138     6.254 … #> Bifidobacterium      1.72     1.976     2.309     0.452 … #>                         ⋮         ⋮         ⋮         ⋮ ⋱ #>  #> S10051: #>                 S10051_T1 S10051_T2 S10051_T3 S10051_T4   #> Lactobacillus      15.045    13.799    12.554    12.851 … #> Gardnerella             0      1.55       3.1      1.55 … #> Prevotella          5.733     6.434     7.135     7.085 … #> Bifidobacterium         0     1.928     3.856     1.928 … #>                         ⋮         ⋮         ⋮         ⋮ ⋱ #>  #> and 46 more subjects. values_df <- pivot_ts(ts) taxa <- c(\"Lactobacillus\", \"Prevotella\") interaction_barcode(values_df, taxa, \"BirthControlYesNo\", width = 14)"},{"path":"/articles/postpartum.html","id":"prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"Postpartum Community Remodeling","text":"’ll now fit evaluate mbtransfer models. consider two fits – one uses subjects, another estimates using 25/49 . models, use taxonomic (P) intervention (Q) lags three timepoints. data, means can look 6 weeks past predict current microbiome composition. model uses samples gives us sense flexibility approach. think model denoiser / smoothing according subset predictor composition, intervention, subject descriptors, closely can predict community change? second model gives us sense well model might generalize new subjects. harder question, microbiome data tends exhibit high subject--subject variability. said, taxa predictable --sample worth noting, since effects may general. block computes sample prediction errors corresponding two models. test samples, allowed look timepoints week 12. stop samples birth events starting week 13, want predict effect intervention occurred. default, predict function fill timepoints present intervention abundance values slot ts_inter element. means extrapolate starting timepoint way end sampling (roughly, 35 - 45 samples total). , compare predictions across different time horizons. Since running inference can take time, one simple way speed mbtransfer request predictions across shorter time horizons (e.g., reducing number columns interventions slot). compare true vs. predicted abundances block . Samples accurate predictions lie nearer diagonal. ’ve split taxa abundance – row labels give quantiles average abundance. Note row different \\(y\\) axis. clearest patterns , Short time horizons easier predict long ones. panels, --sample performance seem comparable, don’t worried overfitting. abundant taxa appear slightly easier predict. partly reflects high noise level underlying data. rarer taxa, however, many errors come model’s inability predict exact zeros. potentially improved altering model form.","code":"subject_data(ts) <- subject_data(ts) |>   select(subject, BirthControlYesNo) |>   mutate(BirthControlYesNo = ifelse(BirthControlYesNo == \"Yes\", 1, 0))  fits <- list() fits[[\"in-sample\"]] <- mbtransfer(ts, P = 2, Q = 2) fits[[\"out-of-sample\"]] <- mbtransfer(ts[1:25], P = 2, Q = 2) ts_preds <- list() ts_missing <- subset_values(ts, 1:12) ts_preds[[\"in-sample\"]] <- predict(fits[[\"in-sample\"]], ts_missing) ts_preds[[\"out-of-sample\"]] <- predict(fits[[\"out-of-sample\"]], ts_missing[26:49]) reshaped_preds <- map_dfr(ts_preds, ~ reshape_preds(ts, .), .id = \"generalization\") |>   filter(h > 0, h < 50) |>   mutate(h = 10 * floor(h / 10))  ggplot(reshaped_preds) +   geom_abline(slope = 1, col = \"#400610\") +   geom_point(aes(y, y_hat, col = generalization), size = .7, alpha = .6) +   facet_grid(factor(quantile, rev(levels(quantile))) ~ h, scales = \"free_y\") +   labs(x = expression(y), y = expression(hat(y)), col = \"Generalization\") +   scale_x_continuous(expand = c(0, 0), n.breaks = 3) +   scale_y_continuous(expand = c(0, 0), n.breaks = 3) +   scale_color_manual(values = c(\"#A65883\", \"#6593A6\")) +   guides(\"color\" = guide_legend(override.aes = list(size = 4, alpha = 1))) +   theme(     axis.text = element_text(size = 10),     panel.spacing = unit(0, \"line\"),     strip.text.y = element_text(angle = 0, size = 12),     strip.text.x = element_text(angle = 0, size = 12),     legend.title = element_text(size = 14),     legend.text = element_text(size = 11),   ) reshaped_preds |>   group_by(h, quantile, generalization) |>   summarise(correlation = round(cor(y, y_hat), 4)) |>   pivot_wider(names_from = \"generalization\", values_from = \"correlation\") |>   arrange(desc(quantile), h) #> # A tibble: 20 × 4 #> # Groups:   h, quantile [20] #>        h quantile     `in-sample` `out-of-sample` #>    <dbl> <fct>              <dbl>           <dbl> #>  1     0 (5.48,11.5]        0.785           0.738 #>  2    10 (5.48,11.5]        0.707           0.593 #>  3    20 (5.48,11.5]        0.516           0.322 #>  4    30 (5.48,11.5]        0.522           0.440 #>  5    40 (5.48,11.5]        0.566           0.476 #>  6     0 (2.94,5.48]        0.691           0.600 #>  7    10 (2.94,5.48]        0.597           0.477 #>  8    20 (2.94,5.48]        0.505           0.373 #>  9    30 (2.94,5.48]        0.479           0.271 #> 10    40 (2.94,5.48]        0.504           0.293 #> 11     0 (0.547,2.94]       0.729           0.566 #> 12    10 (0.547,2.94]       0.667           0.508 #> 13    20 (0.547,2.94]       0.614           0.410 #> 14    30 (0.547,2.94]       0.535           0.423 #> 15    40 (0.547,2.94]       0.580           0.387 #> 16     0 [0,0.547]          0.849           0.776 #> 17    10 [0,0.547]          0.772           0.701 #> 18    20 [0,0.547]          0.646           0.469 #> 19    30 [0,0.547]          0.502           0.512 #> 20    40 [0,0.547]          0.545           0.454"},{"path":"/articles/postpartum.html","id":"attribution-analysis-selecting-important-taxa","dir":"Articles","previous_headings":"Prediction","what":"Attribution Analysis: Selecting Important Taxa","title":"Postpartum Community Remodeling","text":"Given reasonable performance model, makes sense try following-formal statistical inference. Specifically, want know taxa affected intervention, formal statistical guarantees aren’t reading much anything just noise. end, included select_taxa function performs selective inference data splitting, following (Dai, Lin, Xing, Liu, 2020). Roughly, estimate marginal effects different hypothetical interventions taxa. . many random splits data, similar marginal effects detected across . splits, intuitively suspect intervention influence taxa. algorithm (Dai, Lin, Xing et al., 2020) formalizes intuition way ensures false discovery rate controlled. See manuscript accompanying package details. Practically, implement selection algorithm, need provide counterfactual interventions want contrast. done step . steps helper function creates example counterfactuals. ’ll contrast taxa trajectories first two timepoints assumed belong birth intervention. default, control FDR \\(q\\)-level 0.2 – can modified using qvalue argument. fit model 20 random splits data, step takes time. splits yields higher power, small values n_splits still guarantee FDR control, still able run rest vignette even set n_splits value like 3 4. ms element object includes raw mirror statistics led final inference. larger value mirror statistics, stronger estimated intervention effect. Mirror statistics symmetric around zero suggest intervention effect. Visualizing results, seems taxa data affected intervention. contrasts vignettes package, effect seems taxa-specific. result consistent findings (Costello, DiGiulio, Robaczewska et al., 2022), though. Delivery dramatically remodels vaginal microbiome.","code":"ws <- steps(c(\"birth\" = TRUE), lengths = 2:4, L = 4) ws #> [[1]] #>       t1 t2 t3 t4 #> birth  0  0  0  0 #>  #> [[2]] #>       t1 t2 t3 t4 #> birth  1  1  0  0 #>  #> [[3]] #>       t1 t2 t3 t4 #> birth  1  1  1  0 #>  #> [[4]] #>       t1 t2 t3 t4 #> birth  1  1  1  1 #staxa <- select_taxa(ts, ws[[1]], ws[[2]], ~ mbtransfer(., 2, 2), n_splits = 25) staxa <- readRDS(url(\"https://github.com/krisrs1128/mbtransfer_demo/raw/main/staxa-postpartum.rds\")) staxa$ms |>   mutate(     taxon = taxa(ts)[taxon],     lag = as.factor(lag),     selected = ifelse(taxon %in% unlist(staxa$taxa), \"Selected\", \"Not Selected\")   ) |>   ggplot() +   geom_hline(yintercept = 0, size = 2, col = \"#d3d3d3\") +   geom_boxplot(aes(reorder(taxon, -m), m, fill = lag, col = lag), alpha = 0.8) +   facet_grid(. ~ selected, scales = \"free_x\", space = \"free_x\") +   scale_fill_manual(values = c(\"#c6dbef\", \"#6baed6\", \"#2171b5\", \"#084594\")) +   scale_color_manual(values = c(\"#c6dbef\", \"#6baed6\", \"#2171b5\", \"#084594\")) +   labs(y = expression(M[j]), x = \"Taxon\") +   theme(axis.text.x = element_text(angle = 90, size = 11))"},{"path":"/articles/postpartum.html","id":"comparing-counterfactual-trajectories","dir":"Articles","previous_headings":"Prediction","what":"Comparing Counterfactual Trajectories","title":"Postpartum Community Remodeling","text":"Mirror statistics can highlight species influenced intervention, help us describe “shape” intervention effect. taxa immediately impacted, recover quickly? others whose effects delayed? Transfer function models can help answer question. idea simulate identical interventions across subjects using fitted model predict subsequent taxonomic abundance trajectories. cautious interpretation, though. Simpler models (smaller \\(P\\) \\(Q\\)) limited expressivity – many shapes can approximate. said, simulated trajectories often provide useful summary intervention effects across heterogeneous populations. block , begin simulation timepoint immediately first observed intervention. , simulate four counterfactual outcomes. toggle (1) whether birth intervention occurs (2) BirthControlYesNo variable. reason simulating four combinations see whether learned intervention effect varies among women use birth control following delivery – original paper hypothesizes may difference, based prior biological knowledge examples data. visualize trajectories . Just figure large, ’ve restricted attention just taxa known affected intervention. use ribbon_data helper function extract 25 75% quantiles simulated trajectories. ’s immediately clear taxa become /less abundant population. seems trajectories mainly differ magnitude, shape – taxa begin recover pre-intervention levels approximately rate. Moreover, simulated BirthControlYesNo trajectories seem identical, indicating model learned potential interaction. paper’s discussion still plausible, effect seem strong across entire population considered worth learning model.  always good practice use model-based summaries dig deeper original data (sometimes called “Progressive Disclosure” data visualization literature). directed attempting visualize data , also critical just reporting model summaries captured reality. heatmaps , row different sample, rows correspond different birth control categories. Similarities across panels help explain model learn intervention effect. Moreover, directions effects generally consistent learned effects. Hoever, universal – consider subjects whose L.iners abundance increased following delivery! imagine residual analysis detect outlying subjects, spirit (Holmes, 1993).  can merge single figure using block .","code":"ws <- steps(c(\"birth\" = TRUE), lengths = 2, L = 10) start_ix <- map_dbl(ts, ~ min(which(.@time >= -14))) - 1  sim_bc <- list() for (i in 0:1) {   bc <- subject_data(ts) |>     mutate(BirthControlYesNo = rep(i, n()))   sim_bc[[i + 1]] <- counterfactual_ts(ts, ws[[1]], ws[[2]], start_ix) |>     map(~ replace_subject(., bc)) |>     map(~ predict(fits[[\"in-sample\"]], .)) } focus_taxa <- c(\"Porphyromonas\", \"Lactobacillus\", \"Prevotella_6\", \"L.jensenii\", \"L.iners\", \"Atopobium\") rdata <- sim_bc |>   map_dfr(~ ribbon_data(.[[2]], .[[1]], focus_taxa, delta = 7), .id = \"BC\") |>   mutate(     BC = fct_recode(BC, No = \"1\", Yes = \"2\")   ) |>   filter( #    time > -25, time < 80,     time > -25,     time %% 14 == 0   )  pal <- c(\"#F2785C\", \"#144673\") ribbon_plot(rdata, group = \"BC\") +   facet_wrap(~ reorder(taxon, median)) +   labs(y = expression(paste(Delta, \" Abundance\")), x = \"Day\", fill = \"Birth Control Reinitiated\", col = \"Birth Control Reinitiated\") +   scale_color_manual(values = pal) +   scale_fill_manual(values = pal) +   theme(     axis.title = element_text(size = 12),     strip.text = element_text(size = 12)   ) values_df <- pivot_ts(ts) |>   group_by(taxon) |>   mutate(value = rank(value) / n()) |>   select(-BirthControlYesNo) |>   left_join(subject_data)  taxa_order <- c(\"Lactobacillus\", \"L.iners\", \"L.jensenii\", \"Atopobium\", \"Prevotella_6\", \"Porphyromonas\") interaction_hm(values_df, taxa_order, \"BirthControlYesNo\", -1, width = 14) +   theme(     axis.text.y = element_blank(),     strip.text = element_text(size = 12)   ) p1 <- rdata |>   filter(taxon %in% focus_taxa) |>   mutate(taxon = factor(taxon, levels = taxa_order)) |>   ribbon_plot(group = \"BC\") +   scale_color_manual(values = pal) +   scale_fill_manual(values = pal) +   facet_grid(. ~ taxon) +   labs(title = \"(a) Counterfactual Diference at Interventions\", y = \"Difference\") +   theme(     panel.spacing = unit(0, \"line\"),     axis.text.x = element_text(size = 8),     axis.title.x = element_blank(),     plot.margin = unit(c(0, 0, 0, 0), \"null\")   )  p2 <- values_df |>   mutate(value = rank(value) / n()) |>   interaction_hm(taxa = taxa_order, \"BirthControlYesNo\", -1, width = 14) +   scale_color_gradient(low = \"#eaf7f7\", high = \"#037F8C\") +   scale_fill_gradient(low = \"#eaf7f7\", high = \"#037F8C\") +   labs(x = \"Time\", y = \"Subject\", fill = \"Rank\", color = \"Rank\", title = \"(b) Original Data\") +   theme(     axis.text.y = element_blank(),     axis.ticks.y = element_blank()   )  p1 / p2 +   plot_layout(heights = c(1, 2), guides = \"collect\") &   theme(legend.position = \"right\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kris Sankaran. Author, maintainer. Pratheepa Jeganathan. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sankaran K, Jeganathan P (2024). mbtransfer: Microbiome Intervention Analysis via Transfer Functions Mirror Statistics. R package version 0.2.","code":"@Manual{,   title = {mbtransfer: Microbiome Intervention Analysis via Transfer Functions and Mirror Statistics},   author = {Kris Sankaran and Pratheepa Jeganathan},   year = {2024},   note = {R package version 0.2}, }"},{"path":"/index.html","id":"microbiome-intervention-analysis-using-mbtransfer","dir":"","previous_headings":"","what":"Microbiome Intervention Analysis via Transfer Functions and Mirror Statistics","title":"Microbiome Intervention Analysis via Transfer Functions and Mirror Statistics","text":"mbtransfer R package modeling inference microbial communities dynamic environmental interventions. supports simulation hypothetical community trajectories user-specified perturbations can used select taxa significantly impacted change statistically rigorous sense. accomplishes learning separate transfer function model taxon, relating changes abundance immediate community environmental context. fitted models can used measure significance intervention individual taxa, (larger mirror statistics correspond stronger effects) simulate trajectory differences counterfactual treatments, can read methodology preprint can browse complete examples package documentation.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Microbiome Intervention Analysis via Transfer Functions and Mirror Statistics","text":"can install mbtransfer repository using:","code":"#install.packages(\"devtools\") devtools::install_github(\"krisrs1128/mbtransfer\")"},{"path":"/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Microbiome Intervention Analysis via Transfer Functions and Mirror Statistics","text":"welcome questions comments package! can reach us either github email.","code":""},{"path":"/reference/append_interactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Interactions to Predictor Matrix — append_interactions","title":"Add Interactions to Predictor Matrix — append_interactions","text":"Add Interactions Predictor Matrix","code":""},{"path":"/reference/append_interactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Interactions to Predictor Matrix — append_interactions","text":"","code":"append_interactions(x, interactions = NULL)"},{"path":"/reference/append_interactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Interactions to Predictor Matrix — append_interactions","text":"x original matrix containing source interaction terms. interactions n_interactions x 2 matrix containing interactions add original matrix x.","code":""},{"path":"/reference/append_interactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Interactions to Predictor Matrix — append_interactions","text":"matrix x new columns associated wtih interaction.","code":""},{"path":"/reference/consistency_mirror.html","id":null,"dir":"Reference","previous_headings":"","what":"Mirror Statistics from a Single Split — consistency_mirror","title":"Mirror Statistics from a Single Split — consistency_mirror","text":"based mirror statistic Dai et al. (2022). idea , feature null, sign effect likely positive negative (symmetry supports FDR estimation). real effect, signs likely agree (sign == 1 ) magnitude large.","code":""},{"path":"/reference/consistency_mirror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mirror Statistics from a Single Split — consistency_mirror","text":"","code":"consistency_mirror(effects)"},{"path":"/reference/consistency_mirror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mirror Statistics from a Single Split — consistency_mirror","text":"effects list arrays containing estimated partial dependence effects. list indexes different splits. Within list element, expected dimensions n_taxa x time_lag x random_split_index.","code":""},{"path":"/reference/consistency_mirror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mirror Statistics from a Single Split — consistency_mirror","text":"","code":"effects <- matrix(rnorm(500), 250, 2) m <- consistency_mirror(effects) hist(m, 20)   # long tail on the right is the real effect effects[1:5, ] <- runif(10, 2, 4) m <- consistency_mirror(effects) hist(m, 20)"},{"path":"/reference/consistency_mirror_multisplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Mirrors across Splits — consistency_mirror_multisplit","title":"Compute Mirrors across Splits — consistency_mirror_multisplit","text":"mirror consistency_mirror works effects derived single split. practice, want mirror statistics across multiple splits. small wrapper function computes mirrors effects available along list.","code":""},{"path":"/reference/consistency_mirror_multisplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Mirrors across Splits — consistency_mirror_multisplit","text":"","code":"consistency_mirror_multisplit(effects)"},{"path":"/reference/consistency_mirror_multisplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Mirrors across Splits — consistency_mirror_multisplit","text":"effects list arrays containing estimated partial dependence effects. list indexes different splits. Within list element, expected dimensions n_taxa x time_lag x random_split_index.","code":""},{"path":"/reference/consistency_mirror_multisplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Mirrors across Splits — consistency_mirror_multisplit","text":"","code":"effects <- list() effects[[1]] <- array(rnorm(1000), dim = c(250, 2, 2)) effects[[2]] <- array(rnorm(1000), dim = c(250, 2, 2)) m <- consistency_mirror_multisplit(effects)"},{"path":"/reference/counterfactual_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Counterfactual versions of a ts_inter object — counterfactual_ts","title":"Generate Counterfactual versions of a ts_inter object — counterfactual_ts","text":"mbtransfer makes predictions starting ts_inter objects, order simulate counterfactuals need provide alternative versions objects input. function truncates existing ts object start_ix creates new intervention series according values w0 w1 (starting truncation point).","code":""},{"path":"/reference/counterfactual_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Counterfactual versions of a ts_inter object — counterfactual_ts","text":"","code":"counterfactual_ts(ts, w0, w1, start_ix = NULL)"},{"path":"/reference/counterfactual_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Counterfactual versions of a ts_inter object — counterfactual_ts","text":"ts starting ts_inter object build ' counterfactuals. default, last timepoint current series. w0 first version intervention series consider. w1 second version intervention series consider. start_ix truncation position original ts. Defaults truncation, appends new interventions end existing series.","code":""},{"path":"/reference/counterfactual_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Counterfactual versions of a ts_inter object — counterfactual_ts","text":"Two ts_inter objects interventions corresponding w0 w1.","code":""},{"path":"/reference/counterfactual_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Counterfactual versions of a ts_inter object — counterfactual_ts","text":"","code":"data(sim_ts) ws <- steps(c(\"P1\" = TRUE), 2, 3, 4) ts_star <- counterfactual_ts(sim_ts, ws[[1]], ws[[2]], start_ix = 10)"},{"path":"/reference/interaction_hm.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Time Series Heatmaps — interaction_hm","title":"Visualize Time Series Heatmaps — interaction_hm","text":"helper function visualize time series subset taxa across subjects. used raw data figures case studies section accompanying manuscript.","code":""},{"path":"/reference/interaction_hm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Time Series Heatmaps — interaction_hm","text":"","code":"interaction_hm(values_df, taxa, condition = NULL, r = 0, ...)"},{"path":"/reference/interaction_hm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Time Series Heatmaps — interaction_hm","text":"values_df data.frame containing joined information ts_inter object. row one count one taxon/subject pair. output pivot_ts reshape data format. taxa character vector taxa filter final visualization. condition subject-level variable use faceting. Defaults faceting. r ordering subjects, consider averages rounding timepoints bins. Large r corresponds fine-grained binning, negative r coarse bins. Defaults 0. See subject_order details.","code":""},{"path":"/reference/interaction_hm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Time Series Heatmaps — interaction_hm","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(sim_ts) pivoted <- sim_ts |>   pivot_ts() |>   mutate(v_pos = V1 > 0) #> Joining with `by = join_by(sample)` #> Joining with `by = join_by(sample)` #> Joining with `by = join_by(subject)` interaction_hm(pivoted, c(\"tax1\", \"tax2\"), \"v_pos\")   pivoted |>   group_by(taxon) |>   mutate(value = rank(value) / n()) |>   interaction_hm(c(\"tax1\", \"tax2\"), \"v_pos\")"},{"path":"/reference/interaction_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for Candidate Interactions — interaction_search","title":"Search for Candidate Interactions — interaction_search","text":"Search Candidate Interactions","code":""},{"path":"/reference/interaction_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for Candidate Interactions — interaction_search","text":"","code":"interaction_search(x, y, interactions = \"none\", ...)"},{"path":"/reference/lag_from_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the time lags based on column names — lag_from_names","title":"Detect the time lags based on column names — lag_from_names","text":"helper function deciding P Q transfer function models using just names example set covariates.","code":""},{"path":"/reference/lag_from_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the time lags based on column names — lag_from_names","text":"","code":"lag_from_names(names, group = \"taxon\")"},{"path":"/reference/lag_from_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect the time lags based on column names — lag_from_names","text":"","code":"lag_from_names(c(\"taxon1_lag1\", \"taxon1_lag2\", \"taxon1_lag3\")) #> [1] 3"},{"path":"/reference/mbtransfer.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer Function Model for ts_inter objects — mbtransfer","title":"Transfer Function Model for ts_inter objects — mbtransfer","text":"main prediction function mbtransfer package. Given object class ts_inter (see ts_from_dfs()), fit collection linear gradient boosting-based transfer function models. output object class mbtransfer_model. component boosting model contained @parameters slot, list whose j^th element model j^th taxon (row) within ts's values matrix.","code":""},{"path":"/reference/mbtransfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer Function Model for ts_inter objects — mbtransfer","text":"","code":"mbtransfer(   ts_inter,   P = 1,   Q = 1,   nrounds = 500,   early_stopping_rounds = 5,   verbose = 0,   lambda = 0.1,   alpha = 0.01,   eta = 0.1,   interactions = \"search\",   nthread = -1,   ... )"},{"path":"/reference/mbtransfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer Function Model for ts_inter objects — mbtransfer","text":"ts_inter object class ts_inter containing time-varying microbiome community, environmental interventions, static host features data. columns element values matrix expected consecutive timepoints changing community. ts_from_dfs() helper create objects data.frames relevant information. P number historical community composition timepoints consider making predictions. Q number historical intervention timepoints consider making predictions. nrounds maximum number rounds taxon's gradient boosting model. Smaller values lead faster training, risk poorer fits. Defaults 500. early_stopping_rounds loss function improve many rounds, model assumed converged training stopped. Defaults 5. verbose information gradient boosting model's performance printed? Allowable values 2 (information), 1 (information), 0 (information, default). lambda l2-regularization value linear gradient boosting model. Defaults 1e-1. alpha l1-regularization value linear gradient boosting model. Defaults 1e-2. value generally leads less sparse fits, creates useful variation potential downstream mirror statistics calculations. eta learning rate. Defaults 0.1. slower default xgboost (0.3) found improve stability needing train taxa wide range abundances.","code":""},{"path":"/reference/mbtransfer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transfer Function Model for ts_inter objects — mbtransfer","text":"","code":"data(sim_ts) fit <- mbtransfer(sim_ts) fit@parameters[[1]] #> ##### xgb.Booster #> call: #>   xgb.train(params = params, data = dtrain, nrounds = nrounds,  #>     evals = evals, verbose = verbose, print_every_n = print_every_n,  #>     early_stopping_rounds = early_stopping_rounds, maximize = maximize,  #>     save_period = save_period, save_name = save_name, xgb_model = xgb_model,  #>     callbacks = callbacks, booster = \"gblinear\", alpha = ..2,  #>     lambda = ..3, eta = ..4, nthread = ..5) #> # of features: 194  #> # of rounds:  500  #> xgb.attributes: #>    best_iteration, best_score  #> callbacks: #>    early_stop, evaluation_log  #> evaluation_log: #>      iter train_rmse #>     <int>      <num> #>         1   4.693780 #>         2   4.659525 #> ---                  #>       499   4.284943 #>       500   4.284925"},{"path":"/reference/mbtransfer_model-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer Function Model Class — mbtransfer_model-class","title":"Transfer Function Model Class — mbtransfer_model-class","text":"Transfer Function Model Class","code":""},{"path":"/reference/mbtransfer_model-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Transfer Function Model Class — mbtransfer_model-class","text":"parameters model training result. mbtransfer models, list boosting models trained, one taxon. method model type used prediction. hyper list. containing hyperparameters used model training.","code":""},{"path":"/reference/mbtransfer_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction method for mbtransfer objects — mbtransfer_predict","title":"Prediction method for mbtransfer objects — mbtransfer_predict","text":"Prediction method mbtransfer objects","code":""},{"path":"/reference/mbtransfer_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction method for mbtransfer objects — mbtransfer_predict","text":"","code":"mbtransfer_predict(object, newdata)"},{"path":"/reference/mbtransfer_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction method for mbtransfer objects — mbtransfer_predict","text":"object object class mbtransfer_model, generated using mbtransfer function. includes trained boosting models every taxon, stored within @parameters slot. newdata new ts_inter object perform prediction. method make predictions every timepoint appears @interventions slot @values.","code":""},{"path":"/reference/mbtransfer_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction method for mbtransfer objects — mbtransfer_predict","text":"","code":"data(sim_ts) fit <- mbtransfer(sim_ts) ts_subset <- subset_values(sim_ts, 1:25) predict(fit, ts_subset) #> # A ts_inter object | 100 taxa | 50 subjects | 27.00 ± 0.00 timepoints: #>  #> S1: #>      S1_T1 S1_T2 S1_T3 S1_T4   #> tax1     5     7     5     3 … #> tax2    23    43    19     3 … #> tax3    17    40    42    25 … #> tax4    30    12    15     7 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> S2: #>      S2_T1 S2_T2 S2_T3 S2_T4   #> tax1     6     4    11     8 … #> tax2    53    12    15     1 … #> tax3     6     8    23     5 … #> tax4    24    11    12    15 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> S3: #>      S3_T1 S3_T2 S3_T3 S3_T4   #> tax1     5     3     6     5 … #> tax2     9    13    26     3 … #> tax3    60    13     4     6 … #> tax4    22    17     6     8 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> and 47 more subjects."},{"path":"/reference/model_predict_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction for a Single Subject — model_predict_single","title":"Prediction for a Single Subject — model_predict_single","text":"loops timepoints single subject makes predictions comparing number timepoints @interventions @values. gap filled one step time using mbtransfer_predict_step().","code":""},{"path":"/reference/model_predict_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction for a Single Subject — model_predict_single","text":"","code":"model_predict_single(fit, ts_inter, lags, subject = NULL, interactions = NULL)"},{"path":"/reference/model_predict_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction for a Single Subject — model_predict_single","text":"fit object class mbtransfer_model, generated using mbtransfer function. includes trained boosting models every taxon, stored within @parameters slot. ts_inter new ts_inter_single object perform prediction. method make predictions every timepoint appears @interventions slot @values. assumed single subject larger ts_inter object. lags vector specifying P Q trained mbtransfer model. subject static data frame subject-level variables. concatenated time-varying intervention taxonomic covariates making predictions. analogous training process.","code":""},{"path":"/reference/model_predict_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions for a single timepoint and subject — model_predict_step","title":"Predictions for a single timepoint and subject — model_predict_step","text":"make predictions taxa single timestep ahead one subject. loops trained boosting models taxon predicts single value .","code":""},{"path":"/reference/model_predict_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions for a single timepoint and subject — model_predict_step","text":"","code":"model_predict_step(ts_inter, fit, lags, subject = NULL, interactions = NULL)"},{"path":"/reference/model_predict_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions for a single timepoint and subject — model_predict_step","text":"ts_inter new ts_inter_single object perform prediction. method make predictions every timepoint appears @interventions slot @values. assumed single subject larger ts_inter object. fit object class mbtransfer_model, generated using mbtransfer function. includes trained boosting models every taxon, stored within @parameters slot. lags vector specifying P Q trained mbtransfer model. subject static data frame subject-level variables. concatenated time-varying intervention taxonomic covariates making predictions. analogous training process.","code":""},{"path":"/reference/patchify_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Sliding Windows for a ts_inter object — patchify_df","title":"Sliding Windows for a ts_inter object — patchify_df","text":"creates sliding windows intervention community composition features . subjects ts_inter object. returns list giving \"patchified\" data. first component, x, gives microbiome intervention features immediately preceding values second component, y. constructed running patchify_single_df subjects dataset.","code":""},{"path":"/reference/patchify_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sliding Windows for a ts_inter object — patchify_df","text":"","code":"patchify_df(ts_inter, p = 2, q = 3, interactions = \"none\")"},{"path":"/reference/patchify_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sliding Windows for a ts_inter object — patchify_df","text":"ts_inter object class ts_inter generate sliding windows. p number time lags . use sliding window microbiome features. q number time lags use sliding window interventions.","code":""},{"path":"/reference/patchify_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sliding Windows for a ts_inter object — patchify_df","text":"","code":"data(sim_ts) result <- patchify_df(sim_ts) lapply(result, head) #> $x #>      taxon1_lag2 taxon2_lag2 taxon3_lag2 taxon4_lag2 taxon5_lag2 taxon6_lag2 #> [1,]           5          23          17          30           3         115 #> [2,]           7          43          40          12           2          20 #> [3,]           5          19          42          15           3          23 #> [4,]           3           3          25           7          13           1 #> [5,]           6           7           8          23           7          15 #> [6,]           2          14          13          13           4           2 #>      taxon7_lag2 taxon8_lag2 taxon9_lag2 taxon10_lag2 taxon11_lag2 taxon12_lag2 #> [1,]           8           2          14           42           21            7 #> [2,]          42           3           8            9            5           53 #> [3,]          22          12           4           13            8           47 #> [4,]           6          19          14           15           21           22 #> [5,]          27          13          15           33           11           14 #> [6,]           9          14          22           19           13           14 #>      taxon13_lag2 taxon14_lag2 taxon15_lag2 taxon16_lag2 taxon17_lag2 #> [1,]           12            2           10           12            4 #> [2,]            8            4           18            6            7 #> [3,]            2           23           18            2            7 #> [4,]           21            5           18            8            6 #> [5,]           12            7           13            1           11 #> [6,]            4            6            7            3           11 #>      taxon18_lag2 taxon19_lag2 taxon20_lag2 taxon21_lag2 taxon22_lag2 #> [1,]           20            5            1            3            0 #> [2,]            5            2           27            3            2 #> [3,]            9            9           21            5           48 #> [4,]            4           10            0            4           13 #> [5,]            7            9            5            8            1 #> [6,]            5           24            7            1            6 #>      taxon23_lag2 taxon24_lag2 taxon25_lag2 taxon26_lag2 taxon27_lag2 #> [1,]           22            1            5           35           10 #> [2,]            1            7            8            5            2 #> [3,]            3           29            2           12            8 #> [4,]           21            1            7            7            6 #> [5,]            3            4            4            4           22 #> [6,]           12            6           21            8            5 #>      taxon28_lag2 taxon29_lag2 taxon30_lag2 taxon31_lag2 taxon32_lag2 #> [1,]            7           29            3           14            5 #> [2,]           13            4            5            1            0 #> [3,]            6            4           14            7            1 #> [4,]            5            0            5            4            8 #> [5,]           12            0            6           14            0 #> [6,]           10           10            6            2            2 #>      taxon33_lag2 taxon34_lag2 taxon35_lag2 taxon36_lag2 taxon37_lag2 #> [1,]            6            3            7           10           48 #> [2,]            5            2           13            1           14 #> [3,]            2            8            5            9            8 #> [4,]           10           10            1           11            4 #> [5,]            2           13           14           17           14 #> [6,]            7           15            4            5           21 #>      taxon38_lag2 taxon39_lag2 taxon40_lag2 taxon41_lag2 taxon42_lag2 #> [1,]            6            8           10            6           19 #> [2,]            9            4           11            8           56 #> [3,]            7           13            4            4            5 #> [4,]            7            1            7            8            7 #> [5,]            4            2            7           10           16 #> [6,]            4            7            6            2            8 #>      taxon43_lag2 taxon44_lag2 taxon45_lag2 taxon46_lag2 taxon47_lag2 #> [1,]           18           13           44           23            2 #> [2,]           30           22           13           79            1 #> [3,]           26           36           10           11            2 #> [4,]            2            9            7            6            7 #> [5,]           10           32           21            6            5 #> [6,]            3            0            8           30            9 #>      taxon48_lag2 taxon49_lag2 taxon50_lag2 taxon51_lag2 taxon52_lag2 #> [1,]            4            8           17            0            4 #> [2,]            7            9            6            0            2 #> [3,]           23            3           16           12            1 #> [4,]           24           17           19           11            3 #> [5,]            8           12           19            4           19 #> [6,]           14           17           22            5            2 #>      taxon53_lag2 taxon54_lag2 taxon55_lag2 taxon56_lag2 taxon57_lag2 #> [1,]           15           78           17            0            1 #> [2,]           12           10            4            3           25 #> [3,]           19           19            8            3           14 #> [4,]           10           32            8            5           17 #> [5,]            5           26           16           17            8 #> [6,]           13           10            3            9            6 #>      taxon58_lag2 taxon59_lag2 taxon60_lag2 taxon61_lag2 taxon62_lag2 #> [1,]           12            5           14           14           21 #> [2,]            8            3           21           56           10 #> [3,]            6            1            5           40           12 #> [4,]            8           14            9           17           12 #> [5,]            3           17           26            9            7 #> [6,]            8            9           10           52            4 #>      taxon63_lag2 taxon64_lag2 taxon65_lag2 taxon66_lag2 taxon67_lag2 #> [1,]           26           28           13           16            2 #> [2,]            2           15            7           29            1 #> [3,]           25           21           10           32            9 #> [4,]            2           13            9           11           21 #> [5,]            4           25           11            6            4 #> [6,]            6           29            4            8            6 #>      taxon68_lag2 taxon69_lag2 taxon70_lag2 taxon71_lag2 taxon72_lag2 #> [1,]           12           13           29            6           13 #> [2,]            0            8           40            5            1 #> [3,]           31            3           31            7            1 #> [4,]            9            3           10            4            5 #> [5,]           11            2            7           31           13 #> [6,]           15           26           13            6            4 #>      taxon73_lag2 taxon74_lag2 taxon75_lag2 taxon76_lag2 taxon77_lag2 #> [1,]            5           17            6            4            7 #> [2,]            7           22            1            0            2 #> [3,]           13           12            6            5           18 #> [4,]           16            2            3            4           16 #> [5,]           18           16            5           21            2 #> [6,]           17            9            8            0            5 #>      taxon78_lag2 taxon79_lag2 taxon80_lag2 taxon81_lag2 taxon82_lag2 #> [1,]            2            6           14            5           16 #> [2,]            6            0            4            7            4 #> [3,]           13            3            7           19            3 #> [4,]            3            8            0           12            5 #> [5,]           22           14           11            9           11 #> [6,]            7           11           15            4            5 #>      taxon83_lag2 taxon84_lag2 taxon85_lag2 taxon86_lag2 taxon87_lag2 #> [1,]            5            5           10           18            7 #> [2,]           12            3            6            6           15 #> [3,]           36           10            7           24            1 #> [4,]           16           12            2            6           11 #> [5,]            9           10            0           12            6 #> [6,]           13           28            0           18            9 #>      taxon88_lag2 taxon89_lag2 taxon90_lag2 taxon91_lag2 taxon92_lag2 #> [1,]           37            6           26           21            7 #> [2,]           10            7           12           18           13 #> [3,]           13           14            5            3            9 #> [4,]            5            3            1           13            8 #> [5,]           12            8           17            4           25 #> [6,]           11            4            6            6           20 #>      taxon93_lag2 taxon94_lag2 taxon95_lag2 taxon96_lag2 taxon97_lag2 #> [1,]           10           10            3           58           10 #> [2,]            4           23           32           23           41 #> [3,]            0            9           13           15            8 #> [4,]           31            6           31           20           16 #> [5,]           14            8            9            4           15 #> [6,]            4            6           31            9           13 #>      taxon98_lag2 taxon99_lag2 taxon100_lag2 taxon1_lag1 taxon2_lag1 #> [1,]           10           12             5           7          43 #> [2,]           17            4             0           5          19 #> [3,]           14            9             9           3           3 #> [4,]            0           10             1           6           7 #> [5,]           12            7            16           2          14 #> [6,]            1           18             8           7           2 #>      taxon3_lag1 taxon4_lag1 taxon5_lag1 taxon6_lag1 taxon7_lag1 taxon8_lag1 #> [1,]          40          12           2          20          42           3 #> [2,]          42          15           3          23          22          12 #> [3,]          25           7          13           1           6          19 #> [4,]           8          23           7          15          27          13 #> [5,]          13          13           4           2           9          14 #> [6,]          29          13           6          11          14          13 #>      taxon9_lag1 taxon10_lag1 taxon11_lag1 taxon12_lag1 taxon13_lag1 #> [1,]           8            9            5           53            8 #> [2,]           4           13            8           47            2 #> [3,]          14           15           21           22           21 #> [4,]          15           33           11           14           12 #> [5,]          22           19           13           14            4 #> [6,]          11            2           15            1            2 #>      taxon14_lag1 taxon15_lag1 taxon16_lag1 taxon17_lag1 taxon18_lag1 #> [1,]            4           18            6            7            5 #> [2,]           23           18            2            7            9 #> [3,]            5           18            8            6            4 #> [4,]            7           13            1           11            7 #> [5,]            6            7            3           11            5 #> [6,]           14            2           19            3            3 #>      taxon19_lag1 taxon20_lag1 taxon21_lag1 taxon22_lag1 taxon23_lag1 #> [1,]            2           27            3            2            1 #> [2,]            9           21            5           48            3 #> [3,]           10            0            4           13           21 #> [4,]            9            5            8            1            3 #> [5,]           24            7            1            6           12 #> [6,]            7           23           29           36           13 #>      taxon24_lag1 taxon25_lag1 taxon26_lag1 taxon27_lag1 taxon28_lag1 #> [1,]            7            8            5            2           13 #> [2,]           29            2           12            8            6 #> [3,]            1            7            7            6            5 #> [4,]            4            4            4           22           12 #> [5,]            6           21            8            5           10 #> [6,]            5           21           14           14            4 #>      taxon29_lag1 taxon30_lag1 taxon31_lag1 taxon32_lag1 taxon33_lag1 #> [1,]            4            5            1            0            5 #> [2,]            4           14            7            1            2 #> [3,]            0            5            4            8           10 #> [4,]            0            6           14            0            2 #> [5,]           10            6            2            2            7 #> [6,]           15            8            0           15            8 #>      taxon34_lag1 taxon35_lag1 taxon36_lag1 taxon37_lag1 taxon38_lag1 #> [1,]            2           13            1           14            9 #> [2,]            8            5            9            8            7 #> [3,]           10            1           11            4            7 #> [4,]           13           14           17           14            4 #> [5,]           15            4            5           21            4 #> [6,]            9            3            7            8            9 #>      taxon39_lag1 taxon40_lag1 taxon41_lag1 taxon42_lag1 taxon43_lag1 #> [1,]            4           11            8           56           30 #> [2,]           13            4            4            5           26 #> [3,]            1            7            8            7            2 #> [4,]            2            7           10           16           10 #> [5,]            7            6            2            8            3 #> [6,]            4           10            3            9           16 #>      taxon44_lag1 taxon45_lag1 taxon46_lag1 taxon47_lag1 taxon48_lag1 #> [1,]           22           13           79            1            7 #> [2,]           36           10           11            2           23 #> [3,]            9            7            6            7           24 #> [4,]           32           21            6            5            8 #> [5,]            0            8           30            9           14 #> [6,]           12            7            3            4            6 #>      taxon49_lag1 taxon50_lag1 taxon51_lag1 taxon52_lag1 taxon53_lag1 #> [1,]            9            6            0            2           12 #> [2,]            3           16           12            1           19 #> [3,]           17           19           11            3           10 #> [4,]           12           19            4           19            5 #> [5,]           17           22            5            2           13 #> [6,]           18            4            6            2            7 #>      taxon54_lag1 taxon55_lag1 taxon56_lag1 taxon57_lag1 taxon58_lag1 #> [1,]           10            4            3           25            8 #> [2,]           19            8            3           14            6 #> [3,]           32            8            5           17            8 #> [4,]           26           16           17            8            3 #> [5,]           10            3            9            6            8 #> [6,]           12            9            3            0            3 #>      taxon59_lag1 taxon60_lag1 taxon61_lag1 taxon62_lag1 taxon63_lag1 #> [1,]            3           21           56           10            2 #> [2,]            1            5           40           12           25 #> [3,]           14            9           17           12            2 #> [4,]           17           26            9            7            4 #> [5,]            9           10           52            4            6 #> [6,]            8           13            0            5            6 #>      taxon64_lag1 taxon65_lag1 taxon66_lag1 taxon67_lag1 taxon68_lag1 #> [1,]           15            7           29            1            0 #> [2,]           21           10           32            9           31 #> [3,]           13            9           11           21            9 #> [4,]           25           11            6            4           11 #> [5,]           29            4            8            6           15 #> [6,]            8           10            3            6            9 #>      taxon69_lag1 taxon70_lag1 taxon71_lag1 taxon72_lag1 taxon73_lag1 #> [1,]            8           40            5            1            7 #> [2,]            3           31            7            1           13 #> [3,]            3           10            4            5           16 #> [4,]            2            7           31           13           18 #> [5,]           26           13            6            4           17 #> [6,]           14            7            4            7            3 #>      taxon74_lag1 taxon75_lag1 taxon76_lag1 taxon77_lag1 taxon78_lag1 #> [1,]           22            1            0            2            6 #> [2,]           12            6            5           18           13 #> [3,]            2            3            4           16            3 #> [4,]           16            5           21            2           22 #> [5,]            9            8            0            5            7 #> [6,]           30           25           29            4            6 #>      taxon79_lag1 taxon80_lag1 taxon81_lag1 taxon82_lag1 taxon83_lag1 #> [1,]            0            4            7            4           12 #> [2,]            3            7           19            3           36 #> [3,]            8            0           12            5           16 #> [4,]           14           11            9           11            9 #> [5,]           11           15            4            5           13 #> [6,]           14           14           12            6           28 #>      taxon84_lag1 taxon85_lag1 taxon86_lag1 taxon87_lag1 taxon88_lag1 #> [1,]            3            6            6           15           10 #> [2,]           10            7           24            1           13 #> [3,]           12            2            6           11            5 #> [4,]           10            0           12            6           12 #> [5,]           28            0           18            9           11 #> [6,]            6            7            7           16           13 #>      taxon89_lag1 taxon90_lag1 taxon91_lag1 taxon92_lag1 taxon93_lag1 #> [1,]            7           12           18           13            4 #> [2,]           14            5            3            9            0 #> [3,]            3            1           13            8           31 #> [4,]            8           17            4           25           14 #> [5,]            4            6            6           20            4 #> [6,]           26           12            2           10           15 #>      taxon94_lag1 taxon95_lag1 taxon96_lag1 taxon97_lag1 taxon98_lag1 #> [1,]           23           32           23           41           17 #> [2,]            9           13           15            8           14 #> [3,]            6           31           20           16            0 #> [4,]            8            9            4           15           12 #> [5,]            6           31            9           13            1 #> [6,]            3           15           17            4            0 #>      taxon99_lag1 taxon100_lag1 intervention1_lag2 intervention1_lag1 #> [1,]            4             0                  0                  0 #> [2,]            9             9                  0                  0 #> [3,]           10             1                  0                  0 #> [4,]            7            16                  0                  0 #> [5,]           18             8                  0                  0 #> [6,]           11            11                  0                  0 #>      intervention1_lag0        V1 #> [1,]                  0 0.3295958 #> [2,]                  0 0.3295958 #> [3,]                  0 0.3295958 #> [4,]                  0 0.3295958 #> [5,]                  0 0.3295958 #> [6,]                  0 0.3295958 #>  #> $y #> # A tibble: 6 × 100 #>   taxon1 taxon2 taxon3 taxon4 taxon5 taxon6 taxon7 taxon8 taxon9 taxon10 taxon11 #>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl> #> 1      3      3     25      7     13      1      6     19     14      15      21 #> 2      6      7      8     23      7     15     27     13     15      33      11 #> 3      2     14     13     13      4      2      9     14     22      19      13 #> 4      7      2     29     13      6     11     14     13     11       2      15 #> 5     11     18     10      7     12     22     16      9      5      19       3 #> 6      6      6      5      8     15     35      2     11     24      24       4 #> # ℹ 89 more variables: taxon12 <dbl>, taxon13 <dbl>, taxon14 <dbl>, #> #   taxon15 <dbl>, taxon16 <dbl>, taxon17 <dbl>, taxon18 <dbl>, taxon19 <dbl>, #> #   taxon20 <dbl>, taxon21 <dbl>, taxon22 <dbl>, taxon23 <dbl>, taxon24 <dbl>, #> #   taxon25 <dbl>, taxon26 <dbl>, taxon27 <dbl>, taxon28 <dbl>, taxon29 <dbl>, #> #   taxon30 <dbl>, taxon31 <dbl>, taxon32 <dbl>, taxon33 <dbl>, taxon34 <dbl>, #> #   taxon35 <dbl>, taxon36 <dbl>, taxon37 <dbl>, taxon38 <dbl>, taxon39 <dbl>, #> #   taxon40 <dbl>, taxon41 <dbl>, taxon42 <dbl>, taxon43 <dbl>, … #>  #> $interactions #> NULL #>"},{"path":"/reference/patchify_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Sliding Windows for a ts_inter_single object — patchify_single","title":"Sliding Windows for a ts_inter_single object — patchify_single","text":"creates sliding windows intervention community composition features single subject. returns list giving \"patchified\" data, can organized matrices prediction.","code":""},{"path":"/reference/patchify_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sliding Windows for a ts_inter_single object — patchify_single","text":"","code":"patchify_single(ts_inter, p = 2, q = 3)"},{"path":"/reference/patchify_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sliding Windows for a ts_inter_single object — patchify_single","text":"ts_inter object class ts_inter_single generate sliding windows. p number time lags . use sliding window microbiome features. q number time lags use sliding window interventions.","code":""},{"path":"/reference/patchify_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sliding Windows for a ts_inter_single object — patchify_single","text":"","code":"data(sim_ts) patches <- patchify_single(sim_ts[[1]]) head(patches$x[[1]]) #>      S1_T1 S1_T2 #> tax1     5     7 #> tax2    23    43 #> tax3    17    40 #> tax4    30    12 #> tax5     3     2 #> tax6   115    20 head(patches$w[[1]]) #>    S1_T1 S1_T2 S1_T3 #> P1     0     0     0 head(patches$y[[1]]) #>      S1_T4 #> tax1     3 #> tax2     3 #> tax3    25 #> tax4     7 #> tax5    13 #> tax6     1"},{"path":"/reference/patchify_single_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert patchify_single output into a data.frame — patchify_single_df","title":"Convert patchify_single output into a data.frame — patchify_single_df","text":"generates data.frame sliding window predictors responses wrapping patchify_single. format can directly used different regression methods.","code":""},{"path":"/reference/patchify_single_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert patchify_single output into a data.frame — patchify_single_df","text":"","code":"patchify_single_df(ts_inter, p, q)"},{"path":"/reference/patchify_single_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert patchify_single output into a data.frame — patchify_single_df","text":"ts_inter object class ts_inter_single generate sliding windows. p number time lags . use sliding window microbiome features. q number time lags use sliding window interventions.","code":""},{"path":"/reference/patchify_single_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert patchify_single output into a data.frame — patchify_single_df","text":"","code":"data(sim_ts) patches <- patchify_single_df(sim_ts[[1]], 2, 2) head(patches$x) #>      taxon1_lag2 taxon2_lag2 taxon3_lag2 taxon4_lag2 taxon5_lag2 taxon6_lag2 #> [1,]           5          23          17          30           3         115 #> [2,]           7          43          40          12           2          20 #> [3,]           5          19          42          15           3          23 #> [4,]           3           3          25           7          13           1 #> [5,]           6           7           8          23           7          15 #> [6,]           2          14          13          13           4           2 #>      taxon7_lag2 taxon8_lag2 taxon9_lag2 taxon10_lag2 taxon11_lag2 taxon12_lag2 #> [1,]           8           2          14           42           21            7 #> [2,]          42           3           8            9            5           53 #> [3,]          22          12           4           13            8           47 #> [4,]           6          19          14           15           21           22 #> [5,]          27          13          15           33           11           14 #> [6,]           9          14          22           19           13           14 #>      taxon13_lag2 taxon14_lag2 taxon15_lag2 taxon16_lag2 taxon17_lag2 #> [1,]           12            2           10           12            4 #> [2,]            8            4           18            6            7 #> [3,]            2           23           18            2            7 #> [4,]           21            5           18            8            6 #> [5,]           12            7           13            1           11 #> [6,]            4            6            7            3           11 #>      taxon18_lag2 taxon19_lag2 taxon20_lag2 taxon21_lag2 taxon22_lag2 #> [1,]           20            5            1            3            0 #> [2,]            5            2           27            3            2 #> [3,]            9            9           21            5           48 #> [4,]            4           10            0            4           13 #> [5,]            7            9            5            8            1 #> [6,]            5           24            7            1            6 #>      taxon23_lag2 taxon24_lag2 taxon25_lag2 taxon26_lag2 taxon27_lag2 #> [1,]           22            1            5           35           10 #> [2,]            1            7            8            5            2 #> [3,]            3           29            2           12            8 #> [4,]           21            1            7            7            6 #> [5,]            3            4            4            4           22 #> [6,]           12            6           21            8            5 #>      taxon28_lag2 taxon29_lag2 taxon30_lag2 taxon31_lag2 taxon32_lag2 #> [1,]            7           29            3           14            5 #> [2,]           13            4            5            1            0 #> [3,]            6            4           14            7            1 #> [4,]            5            0            5            4            8 #> [5,]           12            0            6           14            0 #> [6,]           10           10            6            2            2 #>      taxon33_lag2 taxon34_lag2 taxon35_lag2 taxon36_lag2 taxon37_lag2 #> [1,]            6            3            7           10           48 #> [2,]            5            2           13            1           14 #> [3,]            2            8            5            9            8 #> [4,]           10           10            1           11            4 #> [5,]            2           13           14           17           14 #> [6,]            7           15            4            5           21 #>      taxon38_lag2 taxon39_lag2 taxon40_lag2 taxon41_lag2 taxon42_lag2 #> [1,]            6            8           10            6           19 #> [2,]            9            4           11            8           56 #> [3,]            7           13            4            4            5 #> [4,]            7            1            7            8            7 #> [5,]            4            2            7           10           16 #> [6,]            4            7            6            2            8 #>      taxon43_lag2 taxon44_lag2 taxon45_lag2 taxon46_lag2 taxon47_lag2 #> [1,]           18           13           44           23            2 #> [2,]           30           22           13           79            1 #> [3,]           26           36           10           11            2 #> [4,]            2            9            7            6            7 #> [5,]           10           32           21            6            5 #> [6,]            3            0            8           30            9 #>      taxon48_lag2 taxon49_lag2 taxon50_lag2 taxon51_lag2 taxon52_lag2 #> [1,]            4            8           17            0            4 #> [2,]            7            9            6            0            2 #> [3,]           23            3           16           12            1 #> [4,]           24           17           19           11            3 #> [5,]            8           12           19            4           19 #> [6,]           14           17           22            5            2 #>      taxon53_lag2 taxon54_lag2 taxon55_lag2 taxon56_lag2 taxon57_lag2 #> [1,]           15           78           17            0            1 #> [2,]           12           10            4            3           25 #> [3,]           19           19            8            3           14 #> [4,]           10           32            8            5           17 #> [5,]            5           26           16           17            8 #> [6,]           13           10            3            9            6 #>      taxon58_lag2 taxon59_lag2 taxon60_lag2 taxon61_lag2 taxon62_lag2 #> [1,]           12            5           14           14           21 #> [2,]            8            3           21           56           10 #> [3,]            6            1            5           40           12 #> [4,]            8           14            9           17           12 #> [5,]            3           17           26            9            7 #> [6,]            8            9           10           52            4 #>      taxon63_lag2 taxon64_lag2 taxon65_lag2 taxon66_lag2 taxon67_lag2 #> [1,]           26           28           13           16            2 #> [2,]            2           15            7           29            1 #> [3,]           25           21           10           32            9 #> [4,]            2           13            9           11           21 #> [5,]            4           25           11            6            4 #> [6,]            6           29            4            8            6 #>      taxon68_lag2 taxon69_lag2 taxon70_lag2 taxon71_lag2 taxon72_lag2 #> [1,]           12           13           29            6           13 #> [2,]            0            8           40            5            1 #> [3,]           31            3           31            7            1 #> [4,]            9            3           10            4            5 #> [5,]           11            2            7           31           13 #> [6,]           15           26           13            6            4 #>      taxon73_lag2 taxon74_lag2 taxon75_lag2 taxon76_lag2 taxon77_lag2 #> [1,]            5           17            6            4            7 #> [2,]            7           22            1            0            2 #> [3,]           13           12            6            5           18 #> [4,]           16            2            3            4           16 #> [5,]           18           16            5           21            2 #> [6,]           17            9            8            0            5 #>      taxon78_lag2 taxon79_lag2 taxon80_lag2 taxon81_lag2 taxon82_lag2 #> [1,]            2            6           14            5           16 #> [2,]            6            0            4            7            4 #> [3,]           13            3            7           19            3 #> [4,]            3            8            0           12            5 #> [5,]           22           14           11            9           11 #> [6,]            7           11           15            4            5 #>      taxon83_lag2 taxon84_lag2 taxon85_lag2 taxon86_lag2 taxon87_lag2 #> [1,]            5            5           10           18            7 #> [2,]           12            3            6            6           15 #> [3,]           36           10            7           24            1 #> [4,]           16           12            2            6           11 #> [5,]            9           10            0           12            6 #> [6,]           13           28            0           18            9 #>      taxon88_lag2 taxon89_lag2 taxon90_lag2 taxon91_lag2 taxon92_lag2 #> [1,]           37            6           26           21            7 #> [2,]           10            7           12           18           13 #> [3,]           13           14            5            3            9 #> [4,]            5            3            1           13            8 #> [5,]           12            8           17            4           25 #> [6,]           11            4            6            6           20 #>      taxon93_lag2 taxon94_lag2 taxon95_lag2 taxon96_lag2 taxon97_lag2 #> [1,]           10           10            3           58           10 #> [2,]            4           23           32           23           41 #> [3,]            0            9           13           15            8 #> [4,]           31            6           31           20           16 #> [5,]           14            8            9            4           15 #> [6,]            4            6           31            9           13 #>      taxon98_lag2 taxon99_lag2 taxon100_lag2 taxon1_lag1 taxon2_lag1 #> [1,]           10           12             5           7          43 #> [2,]           17            4             0           5          19 #> [3,]           14            9             9           3           3 #> [4,]            0           10             1           6           7 #> [5,]           12            7            16           2          14 #> [6,]            1           18             8           7           2 #>      taxon3_lag1 taxon4_lag1 taxon5_lag1 taxon6_lag1 taxon7_lag1 taxon8_lag1 #> [1,]          40          12           2          20          42           3 #> [2,]          42          15           3          23          22          12 #> [3,]          25           7          13           1           6          19 #> [4,]           8          23           7          15          27          13 #> [5,]          13          13           4           2           9          14 #> [6,]          29          13           6          11          14          13 #>      taxon9_lag1 taxon10_lag1 taxon11_lag1 taxon12_lag1 taxon13_lag1 #> [1,]           8            9            5           53            8 #> [2,]           4           13            8           47            2 #> [3,]          14           15           21           22           21 #> [4,]          15           33           11           14           12 #> [5,]          22           19           13           14            4 #> [6,]          11            2           15            1            2 #>      taxon14_lag1 taxon15_lag1 taxon16_lag1 taxon17_lag1 taxon18_lag1 #> [1,]            4           18            6            7            5 #> [2,]           23           18            2            7            9 #> [3,]            5           18            8            6            4 #> [4,]            7           13            1           11            7 #> [5,]            6            7            3           11            5 #> [6,]           14            2           19            3            3 #>      taxon19_lag1 taxon20_lag1 taxon21_lag1 taxon22_lag1 taxon23_lag1 #> [1,]            2           27            3            2            1 #> [2,]            9           21            5           48            3 #> [3,]           10            0            4           13           21 #> [4,]            9            5            8            1            3 #> [5,]           24            7            1            6           12 #> [6,]            7           23           29           36           13 #>      taxon24_lag1 taxon25_lag1 taxon26_lag1 taxon27_lag1 taxon28_lag1 #> [1,]            7            8            5            2           13 #> [2,]           29            2           12            8            6 #> [3,]            1            7            7            6            5 #> [4,]            4            4            4           22           12 #> [5,]            6           21            8            5           10 #> [6,]            5           21           14           14            4 #>      taxon29_lag1 taxon30_lag1 taxon31_lag1 taxon32_lag1 taxon33_lag1 #> [1,]            4            5            1            0            5 #> [2,]            4           14            7            1            2 #> [3,]            0            5            4            8           10 #> [4,]            0            6           14            0            2 #> [5,]           10            6            2            2            7 #> [6,]           15            8            0           15            8 #>      taxon34_lag1 taxon35_lag1 taxon36_lag1 taxon37_lag1 taxon38_lag1 #> [1,]            2           13            1           14            9 #> [2,]            8            5            9            8            7 #> [3,]           10            1           11            4            7 #> [4,]           13           14           17           14            4 #> [5,]           15            4            5           21            4 #> [6,]            9            3            7            8            9 #>      taxon39_lag1 taxon40_lag1 taxon41_lag1 taxon42_lag1 taxon43_lag1 #> [1,]            4           11            8           56           30 #> [2,]           13            4            4            5           26 #> [3,]            1            7            8            7            2 #> [4,]            2            7           10           16           10 #> [5,]            7            6            2            8            3 #> [6,]            4           10            3            9           16 #>      taxon44_lag1 taxon45_lag1 taxon46_lag1 taxon47_lag1 taxon48_lag1 #> [1,]           22           13           79            1            7 #> [2,]           36           10           11            2           23 #> [3,]            9            7            6            7           24 #> [4,]           32           21            6            5            8 #> [5,]            0            8           30            9           14 #> [6,]           12            7            3            4            6 #>      taxon49_lag1 taxon50_lag1 taxon51_lag1 taxon52_lag1 taxon53_lag1 #> [1,]            9            6            0            2           12 #> [2,]            3           16           12            1           19 #> [3,]           17           19           11            3           10 #> [4,]           12           19            4           19            5 #> [5,]           17           22            5            2           13 #> [6,]           18            4            6            2            7 #>      taxon54_lag1 taxon55_lag1 taxon56_lag1 taxon57_lag1 taxon58_lag1 #> [1,]           10            4            3           25            8 #> [2,]           19            8            3           14            6 #> [3,]           32            8            5           17            8 #> [4,]           26           16           17            8            3 #> [5,]           10            3            9            6            8 #> [6,]           12            9            3            0            3 #>      taxon59_lag1 taxon60_lag1 taxon61_lag1 taxon62_lag1 taxon63_lag1 #> [1,]            3           21           56           10            2 #> [2,]            1            5           40           12           25 #> [3,]           14            9           17           12            2 #> [4,]           17           26            9            7            4 #> [5,]            9           10           52            4            6 #> [6,]            8           13            0            5            6 #>      taxon64_lag1 taxon65_lag1 taxon66_lag1 taxon67_lag1 taxon68_lag1 #> [1,]           15            7           29            1            0 #> [2,]           21           10           32            9           31 #> [3,]           13            9           11           21            9 #> [4,]           25           11            6            4           11 #> [5,]           29            4            8            6           15 #> [6,]            8           10            3            6            9 #>      taxon69_lag1 taxon70_lag1 taxon71_lag1 taxon72_lag1 taxon73_lag1 #> [1,]            8           40            5            1            7 #> [2,]            3           31            7            1           13 #> [3,]            3           10            4            5           16 #> [4,]            2            7           31           13           18 #> [5,]           26           13            6            4           17 #> [6,]           14            7            4            7            3 #>      taxon74_lag1 taxon75_lag1 taxon76_lag1 taxon77_lag1 taxon78_lag1 #> [1,]           22            1            0            2            6 #> [2,]           12            6            5           18           13 #> [3,]            2            3            4           16            3 #> [4,]           16            5           21            2           22 #> [5,]            9            8            0            5            7 #> [6,]           30           25           29            4            6 #>      taxon79_lag1 taxon80_lag1 taxon81_lag1 taxon82_lag1 taxon83_lag1 #> [1,]            0            4            7            4           12 #> [2,]            3            7           19            3           36 #> [3,]            8            0           12            5           16 #> [4,]           14           11            9           11            9 #> [5,]           11           15            4            5           13 #> [6,]           14           14           12            6           28 #>      taxon84_lag1 taxon85_lag1 taxon86_lag1 taxon87_lag1 taxon88_lag1 #> [1,]            3            6            6           15           10 #> [2,]           10            7           24            1           13 #> [3,]           12            2            6           11            5 #> [4,]           10            0           12            6           12 #> [5,]           28            0           18            9           11 #> [6,]            6            7            7           16           13 #>      taxon89_lag1 taxon90_lag1 taxon91_lag1 taxon92_lag1 taxon93_lag1 #> [1,]            7           12           18           13            4 #> [2,]           14            5            3            9            0 #> [3,]            3            1           13            8           31 #> [4,]            8           17            4           25           14 #> [5,]            4            6            6           20            4 #> [6,]           26           12            2           10           15 #>      taxon94_lag1 taxon95_lag1 taxon96_lag1 taxon97_lag1 taxon98_lag1 #> [1,]           23           32           23           41           17 #> [2,]            9           13           15            8           14 #> [3,]            6           31           20           16            0 #> [4,]            8            9            4           15           12 #> [5,]            6           31            9           13            1 #> [6,]            3           15           17            4            0 #>      taxon99_lag1 taxon100_lag1 intervention1_lag1 intervention1_lag0 #> [1,]            4             0                  0                  0 #> [2,]            9             9                  0                  0 #> [3,]           10             1                  0                  0 #> [4,]            7            16                  0                  0 #> [5,]           18             8                  0                  0 #> [6,]           11            11                  0                  0 head(patches$y) #>      taxon1 taxon2 taxon3 taxon4 taxon5 taxon6 taxon7 taxon8 taxon9 taxon10 #> [1,]      3      3     25      7     13      1      6     19     14      15 #> [2,]      6      7      8     23      7     15     27     13     15      33 #> [3,]      2     14     13     13      4      2      9     14     22      19 #> [4,]      7      2     29     13      6     11     14     13     11       2 #> [5,]     11     18     10      7     12     22     16      9      5      19 #> [6,]      6      6      5      8     15     35      2     11     24      24 #>      taxon11 taxon12 taxon13 taxon14 taxon15 taxon16 taxon17 taxon18 taxon19 #> [1,]      21      22      21       5      18       8       6       4      10 #> [2,]      11      14      12       7      13       1      11       7       9 #> [3,]      13      14       4       6       7       3      11       5      24 #> [4,]      15       1       2      14       2      19       3       3       7 #> [5,]       3       8       7       4       9       9       6      32      12 #> [6,]       4       9       9       4      13      10      10       1       1 #>      taxon20 taxon21 taxon22 taxon23 taxon24 taxon25 taxon26 taxon27 taxon28 #> [1,]       0       4      13      21       1       7       7       6       5 #> [2,]       5       8       1       3       4       4       4      22      12 #> [3,]       7       1       6      12       6      21       8       5      10 #> [4,]      23      29      36      13       5      21      14      14       4 #> [5,]       4      12      13       3       3       3       6       6       1 #> [6,]       9      10      17      21       7      10      14       5      24 #>      taxon29 taxon30 taxon31 taxon32 taxon33 taxon34 taxon35 taxon36 taxon37 #> [1,]       0       5       4       8      10      10       1      11       4 #> [2,]       0       6      14       0       2      13      14      17      14 #> [3,]      10       6       2       2       7      15       4       5      21 #> [4,]      15       8       0      15       8       9       3       7       8 #> [5,]       3       5      12       5      13      36      20       8       7 #> [6,]       3       7      13      32       0      11      14      10      21 #>      taxon38 taxon39 taxon40 taxon41 taxon42 taxon43 taxon44 taxon45 taxon46 #> [1,]       7       1       7       8       7       2       9       7       6 #> [2,]       4       2       7      10      16      10      32      21       6 #> [3,]       4       7       6       2       8       3       0       8      30 #> [4,]       9       4      10       3       9      16      12       7       3 #> [5,]       7       8      19       7      10       9      10       6       4 #> [6,]       3       3       9      14       9       5      16       5       1 #>      taxon47 taxon48 taxon49 taxon50 taxon51 taxon52 taxon53 taxon54 taxon55 #> [1,]       7      24      17      19      11       3      10      32       8 #> [2,]       5       8      12      19       4      19       5      26      16 #> [3,]       9      14      17      22       5       2      13      10       3 #> [4,]       4       6      18       4       6       2       7      12       9 #> [5,]      17      24       5      11      11      15      22       3      19 #> [6,]      10      23      14       1       0      15       8       3       7 #>      taxon56 taxon57 taxon58 taxon59 taxon60 taxon61 taxon62 taxon63 taxon64 #> [1,]       5      17       8      14       9      17      12       2      13 #> [2,]      17       8       3      17      26       9       7       4      25 #> [3,]       9       6       8       9      10      52       4       6      29 #> [4,]       3       0       3       8      13       0       5       6       8 #> [5,]       6       7       5       6      12      13      18       6      12 #> [6,]       4       6       2       5      14      45       4       2       9 #>      taxon65 taxon66 taxon67 taxon68 taxon69 taxon70 taxon71 taxon72 taxon73 #> [1,]       9      11      21       9       3      10       4       5      16 #> [2,]      11       6       4      11       2       7      31      13      18 #> [3,]       4       8       6      15      26      13       6       4      17 #> [4,]      10       3       6       9      14       7       4       7       3 #> [5,]       4       1      19      11      10       5      12      13      12 #> [6,]      26       9       3       6       7      14       8       4       2 #>      taxon74 taxon75 taxon76 taxon77 taxon78 taxon79 taxon80 taxon81 taxon82 #> [1,]       2       3       4      16       3       8       0      12       5 #> [2,]      16       5      21       2      22      14      11       9      11 #> [3,]       9       8       0       5       7      11      15       4       5 #> [4,]      30      25      29       4       6      14      14      12       6 #> [5,]       7      16       9      18      17       3      20       5       9 #> [6,]       7       5       5       3       8      13       4       1      13 #>      taxon83 taxon84 taxon85 taxon86 taxon87 taxon88 taxon89 taxon90 taxon91 #> [1,]      16      12       2       6      11       5       3       1      13 #> [2,]       9      10       0      12       6      12       8      17       4 #> [3,]      13      28       0      18       9      11       4       6       6 #> [4,]      28       6       7       7      16      13      26      12       2 #> [5,]       2       6      19       6       3      41      17       9       7 #> [6,]       4      20      10      25       6       3       9       1      11 #>      taxon92 taxon93 taxon94 taxon95 taxon96 taxon97 taxon98 taxon99 taxon100 #> [1,]       8      31       6      31      20      16       0      10        1 #> [2,]      25      14       8       9       4      15      12       7       16 #> [3,]      20       4       6      31       9      13       1      18        8 #> [4,]      10      15       3      15      17       4       0      11       11 #> [5,]       5      16      16      21       3       5      30      17       13 #> [6,]      14      12       9       9      14       8       9       7       15"},{"path":"/reference/pd_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Counterfactual Partial Dependence Effects — pd_effects","title":"Counterfactual Partial Dependence Effects — pd_effects","text":"selection algorithm, select_taxa depends estimates counterfactual partial dependence effects across taxa time lags. supports estimation effects single random data split pair.","code":""},{"path":"/reference/pd_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counterfactual Partial Dependence Effects — pd_effects","text":"","code":"pd_effects(   fit,   ts,   w0,   w1,   n_sample = NULL,   patch_len = 8,   intervention_len = NULL )"},{"path":"/reference/pd_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counterfactual Partial Dependence Effects — pd_effects","text":"fit object class mbtransfer_model, generated using mbtransfer function. includes trained boosting models every taxon, stored within @parameters slot. ts object class ts_inter containing time-varying microbiome community, environmental interventions, static host features data. columns element values matrix expected consecutive timepoints changing community. ts_from_dfs() helper create objects data.frames relevant information. w0 One counterfactuals compute partial dependence profiles. See steps pulses helpers generating counterfactuals. procedure concatenates counterfactuals end series computes difference forecasts. w1 One counterfactuals compute partial dependence profiles. See steps pulses helpers generating counterfactuals. procedure concatenates counterfactuals end series computes difference forecasts.","code":""},{"path":"/reference/pd_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counterfactual Partial Dependence Effects — pd_effects","text":"","code":"data(sim_ts) w0 <- cbind(sim_ts[[1]]@interventions, matrix(0, nrow = 1, ncol = 3)) w1 <- cbind(sim_ts[[1]]@interventions, matrix(1, nrow = 1, ncol = 3)) fit <- mbtransfer(sim_ts, 1, 1, nrounds = 10) pd_effects(fit, sim_ts, w0, w1) #>        S8_S1_T1 S8_S1_T2 S8_S1_T3 S8_S1_T4 S8_S1_T5 S8_S1_T6 S8_S1_T7 S8_S1_T8 #> tax1          0        0        0        0        0        0        0        0 #> tax2          0        0        0        0        0        0        0        0 #> tax3          0        0        0        0        0        0        0        0 #> tax4          0        0        0        0        0        0        0        0 #> tax5          0        0        0        0        0        0        0        0 #> tax6          0        0        0        0        0        0        0        0 #> tax7          0        0        0        0        0        0        0        0 #> tax8          0        0        0        0        0        0        0        0 #> tax9          0        0        0        0        0        0        0        0 #> tax10         0        0        0        0        0        0        0        0 #> tax11         0        0        0        0        0        0        0        0 #> tax12         0        0        0        0        0        0        0        0 #> tax13         0        0        0        0        0        0        0        0 #> tax14         0        0        0        0        0        0        0        0 #> tax15         0        0        0        0        0        0        0        0 #> tax16         0        0        0        0        0        0        0        0 #> tax17         0        0        0        0        0        0        0        0 #> tax18         0        0        0        0        0        0        0        0 #> tax19         0        0        0        0        0        0        0        0 #> tax20         0        0        0        0        0        0        0        0 #> tax21         0        0        0        0        0        0        0        0 #> tax22         0        0        0        0        0        0        0        0 #> tax23         0        0        0        0        0        0        0        0 #> tax24         0        0        0        0        0        0        0        0 #> tax25         0        0        0        0        0        0        0        0 #> tax26         0        0        0        0        0        0        0        0 #> tax27         0        0        0        0        0        0        0        0 #> tax28         0        0        0        0        0        0        0        0 #> tax29         0        0        0        0        0        0        0        0 #> tax30         0        0        0        0        0        0        0        0 #> tax31         0        0        0        0        0        0        0        0 #> tax32         0        0        0        0        0        0        0        0 #> tax33         0        0        0        0        0        0        0        0 #> tax34         0        0        0        0        0        0        0        0 #> tax35         0        0        0        0        0        0        0        0 #> tax36         0        0        0        0        0        0        0        0 #> tax37         0        0        0        0        0        0        0        0 #> tax38         0        0        0        0        0        0        0        0 #> tax39         0        0        0        0        0        0        0        0 #> tax40         0        0        0        0        0        0        0        0 #> tax41         0        0        0        0        0        0        0        0 #> tax42         0        0        0        0        0        0        0        0 #> tax43         0        0        0        0        0        0        0        0 #> tax44         0        0        0        0        0        0        0        0 #> tax45         0        0        0        0        0        0        0        0 #> tax46         0        0        0        0        0        0        0        0 #> tax47         0        0        0        0        0        0        0        0 #> tax48         0        0        0        0        0        0        0        0 #> tax49         0        0        0        0        0        0        0        0 #> tax50         0        0        0        0        0        0        0        0 #> tax51         0        0        0        0        0        0        0        0 #> tax52         0        0        0        0        0        0        0        0 #> tax53         0        0        0        0        0        0        0        0 #> tax54         0        0        0        0        0        0        0        0 #> tax55         0        0        0        0        0        0        0        0 #> tax56         0        0        0        0        0        0        0        0 #> tax57         0        0        0        0        0        0        0        0 #> tax58         0        0        0        0        0        0        0        0 #> tax59         0        0        0        0        0        0        0        0 #> tax60         0        0        0        0        0        0        0        0 #> tax61         0        0        0        0        0        0        0        0 #> tax62         0        0        0        0        0        0        0        0 #> tax63         0        0        0        0        0        0        0        0 #> tax64         0        0        0        0        0        0        0        0 #> tax65         0        0        0        0        0        0        0        0 #> tax66         0        0        0        0        0        0        0        0 #> tax67         0        0        0        0        0        0        0        0 #> tax68         0        0        0        0        0        0        0        0 #> tax69         0        0        0        0        0        0        0        0 #> tax70         0        0        0        0        0        0        0        0 #> tax71         0        0        0        0        0        0        0        0 #> tax72         0        0        0        0        0        0        0        0 #> tax73         0        0        0        0        0        0        0        0 #> tax74         0        0        0        0        0        0        0        0 #> tax75         0        0        0        0        0        0        0        0 #> tax76         0        0        0        0        0        0        0        0 #> tax77         0        0        0        0        0        0        0        0 #> tax78         0        0        0        0        0        0        0        0 #> tax79         0        0        0        0        0        0        0        0 #> tax80         0        0        0        0        0        0        0        0 #> tax81         0        0        0        0        0        0        0        0 #> tax82         0        0        0        0        0        0        0        0 #> tax83         0        0        0        0        0        0        0        0 #> tax84         0        0        0        0        0        0        0        0 #> tax85         0        0        0        0        0        0        0        0 #> tax86         0        0        0        0        0        0        0        0 #> tax87         0        0        0        0        0        0        0        0 #> tax88         0        0        0        0        0        0        0        0 #> tax89         0        0        0        0        0        0        0        0 #> tax90         0        0        0        0        0        0        0        0 #> tax91         0        0        0        0        0        0        0        0 #> tax92         0        0        0        0        0        0        0        0 #> tax93         0        0        0        0        0        0        0        0 #> tax94         0        0        0        0        0        0        0        0 #> tax95         0        0        0        0        0        0        0        0 #> tax96         0        0        0        0        0        0        0        0 #> tax97         0        0        0        0        0        0        0        0 #> tax98         0        0        0        0        0        0        0        0 #> tax99         0        0        0        0        0        0        0        0 #> tax100        0        0        0        0        0        0        0        0 #>        S8_S1_T9 S8_S1_T10 S8_S1_T11 S8_S1_T12 S8_S1_T13 S8_S1_T14 S8_S1_T15 #> tax1          0         0         0         0         0         0         0 #> tax2          0         0         0         0         0         0         0 #> tax3          0         0         0         0         0         0         0 #> tax4          0         0         0         0         0         0         0 #> tax5          0         0         0         0         0         0         0 #> tax6          0         0         0         0         0         0         0 #> tax7          0         0         0         0         0         0         0 #> tax8          0         0         0         0         0         0         0 #> tax9          0         0         0         0         0         0         0 #> tax10         0         0         0         0         0         0         0 #> tax11         0         0         0         0         0         0         0 #> tax12         0         0         0         0         0         0         0 #> tax13         0         0         0         0         0         0         0 #> tax14         0         0         0         0         0         0         0 #> tax15         0         0         0         0         0         0         0 #> tax16         0         0         0         0         0         0         0 #> tax17         0         0         0         0         0         0         0 #> tax18         0         0         0         0         0         0         0 #> tax19         0         0         0         0         0         0         0 #> tax20         0         0         0         0         0         0         0 #> tax21         0         0         0         0         0         0         0 #> tax22         0         0         0         0         0         0         0 #> tax23         0         0         0         0         0         0         0 #> tax24         0         0         0         0         0         0         0 #> tax25         0         0         0         0         0         0         0 #> tax26         0         0         0         0         0         0         0 #> tax27         0         0         0         0         0         0         0 #> tax28         0         0         0         0         0         0         0 #> tax29         0         0         0         0         0         0         0 #> tax30         0         0         0         0         0         0         0 #> tax31         0         0         0         0         0         0         0 #> tax32         0         0         0         0         0         0         0 #> tax33         0         0         0         0         0         0         0 #> tax34         0         0         0         0         0         0         0 #> tax35         0         0         0         0         0         0         0 #> tax36         0         0         0         0         0         0         0 #> tax37         0         0         0         0         0         0         0 #> tax38         0         0         0         0         0         0         0 #> tax39         0         0         0         0         0         0         0 #> tax40         0         0         0         0         0         0         0 #> tax41         0         0         0         0         0         0         0 #> tax42         0         0         0         0         0         0         0 #> tax43         0         0         0         0         0         0         0 #> tax44         0         0         0         0         0         0         0 #> tax45         0         0         0         0         0         0         0 #> tax46         0         0         0         0         0         0         0 #> tax47         0         0         0         0         0         0         0 #> tax48         0         0         0         0         0         0         0 #> tax49         0         0         0         0         0         0         0 #> tax50         0         0         0         0         0         0         0 #> tax51         0         0         0         0         0         0         0 #> tax52         0         0         0         0         0         0         0 #> tax53         0         0         0         0         0         0         0 #> tax54         0         0         0         0         0         0         0 #> tax55         0         0         0         0         0         0         0 #> tax56         0         0         0         0         0         0         0 #> tax57         0         0         0         0         0         0         0 #> tax58         0         0         0         0         0         0         0 #> tax59         0         0         0         0         0         0         0 #> tax60         0         0         0         0         0         0         0 #> tax61         0         0         0         0         0         0         0 #> tax62         0         0         0         0         0         0         0 #> tax63         0         0         0         0         0         0         0 #> tax64         0         0         0         0         0         0         0 #> tax65         0         0         0         0         0         0         0 #> tax66         0         0         0         0         0         0         0 #> tax67         0         0         0         0         0         0         0 #> tax68         0         0         0         0         0         0         0 #> tax69         0         0         0         0         0         0         0 #> tax70         0         0         0         0         0         0         0 #> tax71         0         0         0         0         0         0         0 #> tax72         0         0         0         0         0         0         0 #> tax73         0         0         0         0         0         0         0 #> tax74         0         0         0         0         0         0         0 #> tax75         0         0         0         0         0         0         0 #> tax76         0         0         0         0         0         0         0 #> tax77         0         0         0         0         0         0         0 #> tax78         0         0         0         0         0         0         0 #> tax79         0         0         0         0         0         0         0 #> tax80         0         0         0         0         0         0         0 #> tax81         0         0         0         0         0         0         0 #> tax82         0         0         0         0         0         0         0 #> tax83         0         0         0         0         0         0         0 #> tax84         0         0         0         0         0         0         0 #> tax85         0         0         0         0         0         0         0 #> tax86         0         0         0         0         0         0         0 #> tax87         0         0         0         0         0         0         0 #> tax88         0         0         0         0         0         0         0 #> tax89         0         0         0         0         0         0         0 #> tax90         0         0         0         0         0         0         0 #> tax91         0         0         0         0         0         0         0 #> tax92         0         0         0         0         0         0         0 #> tax93         0         0         0         0         0         0         0 #> tax94         0         0         0         0         0         0         0 #> tax95         0         0         0         0         0         0         0 #> tax96         0         0         0         0         0         0         0 #> tax97         0         0         0         0         0         0         0 #> tax98         0         0         0         0         0         0         0 #> tax99         0         0         0         0         0         0         0 #> tax100        0         0         0         0         0         0         0 #>        S8_S1_T16 S8_S1_T17 S8_S1_T18 S8_S1_T19 S8_S1_T20 S8_S1_T21 S8_S1_T22 #> tax1           0         0         0         0         0         0         0 #> tax2           0         0         0         0         0         0         0 #> tax3           0         0         0         0         0         0         0 #> tax4           0         0         0         0         0         0         0 #> tax5           0         0         0         0         0         0         0 #> tax6           0         0         0         0         0         0         0 #> tax7           0         0         0         0         0         0         0 #> tax8           0         0         0         0         0         0         0 #> tax9           0         0         0         0         0         0         0 #> tax10          0         0         0         0         0         0         0 #> tax11          0         0         0         0         0         0         0 #> tax12          0         0         0         0         0         0         0 #> tax13          0         0         0         0         0         0         0 #> tax14          0         0         0         0         0         0         0 #> tax15          0         0         0         0         0         0         0 #> tax16          0         0         0         0         0         0         0 #> tax17          0         0         0         0         0         0         0 #> tax18          0         0         0         0         0         0         0 #> tax19          0         0         0         0         0         0         0 #> tax20          0         0         0         0         0         0         0 #> tax21          0         0         0         0         0         0         0 #> tax22          0         0         0         0         0         0         0 #> tax23          0         0         0         0         0         0         0 #> tax24          0         0         0         0         0         0         0 #> tax25          0         0         0         0         0         0         0 #> tax26          0         0         0         0         0         0         0 #> tax27          0         0         0         0         0         0         0 #> tax28          0         0         0         0         0         0         0 #> tax29          0         0         0         0         0         0         0 #> tax30          0         0         0         0         0         0         0 #> tax31          0         0         0         0         0         0         0 #> tax32          0         0         0         0         0         0         0 #> tax33          0         0         0         0         0         0         0 #> tax34          0         0         0         0         0         0         0 #> tax35          0         0         0         0         0         0         0 #> tax36          0         0         0         0         0         0         0 #> tax37          0         0         0         0         0         0         0 #> tax38          0         0         0         0         0         0         0 #> tax39          0         0         0         0         0         0         0 #> tax40          0         0         0         0         0         0         0 #> tax41          0         0         0         0         0         0         0 #> tax42          0         0         0         0         0         0         0 #> tax43          0         0         0         0         0         0         0 #> tax44          0         0         0         0         0         0         0 #> tax45          0         0         0         0         0         0         0 #> tax46          0         0         0         0         0         0         0 #> tax47          0         0         0         0         0         0         0 #> tax48          0         0         0         0         0         0         0 #> tax49          0         0         0         0         0         0         0 #> tax50          0         0         0         0         0         0         0 #> tax51          0         0         0         0         0         0         0 #> tax52          0         0         0         0         0         0         0 #> tax53          0         0         0         0         0         0         0 #> tax54          0         0         0         0         0         0         0 #> tax55          0         0         0         0         0         0         0 #> tax56          0         0         0         0         0         0         0 #> tax57          0         0         0         0         0         0         0 #> tax58          0         0         0         0         0         0         0 #> tax59          0         0         0         0         0         0         0 #> tax60          0         0         0         0         0         0         0 #> tax61          0         0         0         0         0         0         0 #> tax62          0         0         0         0         0         0         0 #> tax63          0         0         0         0         0         0         0 #> tax64          0         0         0         0         0         0         0 #> tax65          0         0         0         0         0         0         0 #> tax66          0         0         0         0         0         0         0 #> tax67          0         0         0         0         0         0         0 #> tax68          0         0         0         0         0         0         0 #> tax69          0         0         0         0         0         0         0 #> tax70          0         0         0         0         0         0         0 #> tax71          0         0         0         0         0         0         0 #> tax72          0         0         0         0         0         0         0 #> tax73          0         0         0         0         0         0         0 #> tax74          0         0         0         0         0         0         0 #> tax75          0         0         0         0         0         0         0 #> tax76          0         0         0         0         0         0         0 #> tax77          0         0         0         0         0         0         0 #> tax78          0         0         0         0         0         0         0 #> tax79          0         0         0         0         0         0         0 #> tax80          0         0         0         0         0         0         0 #> tax81          0         0         0         0         0         0         0 #> tax82          0         0         0         0         0         0         0 #> tax83          0         0         0         0         0         0         0 #> tax84          0         0         0         0         0         0         0 #> tax85          0         0         0         0         0         0         0 #> tax86          0         0         0         0         0         0         0 #> tax87          0         0         0         0         0         0         0 #> tax88          0         0         0         0         0         0         0 #> tax89          0         0         0         0         0         0         0 #> tax90          0         0         0         0         0         0         0 #> tax91          0         0         0         0         0         0         0 #> tax92          0         0         0         0         0         0         0 #> tax93          0         0         0         0         0         0         0 #> tax94          0         0         0         0         0         0         0 #> tax95          0         0         0         0         0         0         0 #> tax96          0         0         0         0         0         0         0 #> tax97          0         0         0         0         0         0         0 #> tax98          0         0         0         0         0         0         0 #> tax99          0         0         0         0         0         0         0 #> tax100         0         0         0         0         0         0         0 #>        S8_S1_T23 S8_S1_T24 S8_S1_T25 S8_S1_T26 S8_S1_T27           S8_ #> tax1           0         0         0         0         0 -0.6328802222 #> tax2           0         0         0         0         0 -8.8437741257 #> tax3           0         0         0         0         0  0.4410572052 #> tax4           0         0         0         0         0  0.0174821445 #> tax5           0         0         0         0         0 -4.5244598389 #> tax6           0         0         0         0         0 -0.8993101120 #> tax7           0         0         0         0         0 -2.2115803900 #> tax8           0         0         0         0         0 -3.1882864407 #> tax9           0         0         0         0         0 -2.2448129654 #> tax10          0         0         0         0         0 -4.6580564295 #> tax11          0         0         0         0         0  0.0047330856 #> tax12          0         0         0         0         0  0.0189847946 #> tax13          0         0         0         0         0  0.1657667160 #> tax14          0         0         0         0         0 -0.0562362330 #> tax15          0         0         0         0         0 -0.0525388718 #> tax16          0         0         0         0         0 -0.2123460770 #> tax17          0         0         0         0         0  0.0883607864 #> tax18          0         0         0         0         0  0.1418313980 #> tax19          0         0         0         0         0  0.3188953400 #> tax20          0         0         0         0         0  0.5106287003 #> tax21          0         0         0         0         0  0.0186796188 #> tax22          0         0         0         0         0 -0.1705785819 #> tax23          0         0         0         0         0  0.1213951111 #> tax24          0         0         0         0         0 -0.0383281708 #> tax25          0         0         0         0         0  0.2016544342 #> tax26          0         0         0         0         0 -0.1238431931 #> tax27          0         0         0         0         0 -0.1185169220 #> tax28          0         0         0         0         0  0.0637636185 #> tax29          0         0         0         0         0  0.3474597931 #> tax30          0         0         0         0         0 -0.0841779709 #> tax31          0         0         0         0         0  0.1461267471 #> tax32          0         0         0         0         0  0.1200756345 #> tax33          0         0         0         0         0  0.1051912308 #> tax34          0         0         0         0         0  0.0503978729 #> tax35          0         0         0         0         0  0.0007390976 #> tax36          0         0         0         0         0 -0.1462259293 #> tax37          0         0         0         0         0  0.0016946793 #> tax38          0         0         0         0         0 -0.0815124512 #> tax39          0         0         0         0         0 -0.0050592422 #> tax40          0         0         0         0         0  0.1814304988 #> tax41          0         0         0         0         0  0.0000000000 #> tax42          0         0         0         0         0  0.2495574951 #> tax43          0         0         0         0         0 -0.2750339508 #> tax44          0         0         0         0         0  0.0548744202 #> tax45          0         0         0         0         0  0.2248420488 #> tax46          0         0         0         0         0  0.1524724960 #> tax47          0         0         0         0         0  0.0408697128 #> tax48          0         0         0         0         0 -0.1416769028 #> tax49          0         0         0         0         0 -0.0486803055 #> tax50          0         0         0         0         0  0.5374212265 #> tax51          0         0         0         0         0 -0.1485261917 #> tax52          0         0         0         0         0  0.1151742935 #> tax53          0         0         0         0         0 -0.1205968857 #> tax54          0         0         0         0         0 -0.3675680161 #> tax55          0         0         0         0         0  0.0257902145 #> tax56          0         0         0         0         0  0.1291131973 #> tax57          0         0         0         0         0  0.2687921524 #> tax58          0         0         0         0         0 -0.0005226135 #> tax59          0         0         0         0         0 -0.1095457077 #> tax60          0         0         0         0         0  0.0369777679 #> tax61          0         0         0         0         0 -0.0030059814 #> tax62          0         0         0         0         0  0.0065469742 #> tax63          0         0         0         0         0 -0.0619367645 #> tax64          0         0         0         0         0 -0.0077524185 #> tax65          0         0         0         0         0  0.2494735718 #> tax66          0         0         0         0         0  0.1083784103 #> tax67          0         0         0         0         0 -0.4390964508 #> tax68          0         0         0         0         0 -0.0703191757 #> tax69          0         0         0         0         0  0.1078443527 #> tax70          0         0         0         0         0  0.0015411377 #> tax71          0         0         0         0         0 -0.0470839796 #> tax72          0         0         0         0         0 -0.4460372925 #> tax73          0         0         0         0         0  0.2072572708 #> tax74          0         0         0         0         0  0.0500469208 #> tax75          0         0         0         0         0  0.1642303467 #> tax76          0         0         0         0         0  0.0569200516 #> tax77          0         0         0         0         0 -0.0892047882 #> tax78          0         0         0         0         0  0.0475702286 #> tax79          0         0         0         0         0 -0.3316793442 #> tax80          0         0         0         0         0 -0.0647096634 #> tax81          0         0         0         0         0  0.0049247742 #> tax82          0         0         0         0         0 -0.0319490433 #> tax83          0         0         0         0         0 -0.2685098648 #> tax84          0         0         0         0         0  0.0190181732 #> tax85          0         0         0         0         0 -0.2951179062 #> tax86          0         0         0         0         0  0.1837358475 #> tax87          0         0         0         0         0  0.1630449295 #> tax88          0         0         0         0         0  0.2348232269 #> tax89          0         0         0         0         0  0.0548496246 #> tax90          0         0         0         0         0 -0.0032720566 #> tax91          0         0         0         0         0 -0.3443593979 #> tax92          0         0         0         0         0  0.1289834976 #> tax93          0         0         0         0         0 -0.0346021652 #> tax94          0         0         0         0         0  0.1041212593 #> tax95          0         0         0         0         0 -0.2353229523 #> tax96          0         0         0         0         0 -0.0891284943 #> tax97          0         0         0         0         0  0.0640258789 #> tax98          0         0         0         0         0  0.0483798981 #> tax99          0         0         0         0         0  0.2897911072 #> tax100         0         0         0         0         0  0.0845527649 #>                 S8_           S8_ #> tax1   -0.841968565 -0.8615373997 #> tax2   -8.616192341 -8.6385455018 #> tax3    0.535736538  0.5505777654 #> tax4   -0.381647235 -0.4142778828 #> tax5   -5.305637314 -5.3460654758 #> tax6   -1.183096080 -1.2109350704 #> tax7   -2.026250692 -2.0064143113 #> tax8   -3.337658576 -3.3457967554 #> tax9   -1.902098962 -1.8893083277 #> tax10  -4.784692367 -4.7990008422 #> tax11   0.031126897  0.0330958593 #> tax12   0.074788650  0.0940598193 #> tax13   0.172989561  0.1804017794 #> tax14  -0.015602543 -0.0097186111 #> tax15  -0.089776754 -0.0972206593 #> tax16  -0.212339742 -0.2150062947 #> tax17   0.197786138  0.1936044125 #> tax18   0.115214484  0.0906007630 #> tax19   0.330123856  0.3510301227 #> tax20   0.534867798  0.5215133485 #> tax21   0.020885490  0.0116162073 #> tax22  -0.369475319 -0.3869218486 #> tax23   0.124769744  0.1390411400 #> tax24   0.063179811  0.0520120916 #> tax25   0.227075895  0.2494729360 #> tax26  -0.262710480 -0.2874254045 #> tax27  -0.091604766 -0.0871378013 #> tax28  -0.156010378 -0.1709841319 #> tax29   0.482207423  0.5002813453 #> tax30  -0.032174065 -0.0339026565 #> tax31   0.069299005  0.0956573486 #> tax32   0.132169871  0.1327987058 #> tax33   0.268895694  0.2745615982 #> tax34   0.037475092  0.0316117661 #> tax35  -0.005464111 -0.0144090652 #> tax36  -0.123176518 -0.1220261142 #> tax37   0.019926730  0.0482657523 #> tax38  -0.029512689 -0.0230897041 #> tax39  -0.050295773 -0.0361498538 #> tax40   0.223427387  0.2303639026 #> tax41   0.030535494  0.0170458612 #> tax42   0.286170335  0.2764419942 #> tax43  -0.346275330 -0.3348737898 #> tax44  -0.021795716 -0.0378965991 #> tax45   0.188128778  0.2004478432 #> tax46   0.044671808  0.0412579832 #> tax47   0.028115341  0.0123067470 #> tax48  -0.115365517 -0.1090939158 #> tax49   0.108508916  0.1215218249 #> tax50   0.569268931  0.5544033164 #> tax51  -0.139864939 -0.1608895347 #> tax52   0.108528364  0.1145164172 #> tax53  -0.026961724 -0.0231522946 #> tax54  -0.447786263 -0.4437057745 #> tax55   0.033789828  0.0060634613 #> tax56   0.156848170  0.1539199579 #> tax57   0.401826677  0.4305925823 #> tax58   0.013799054  0.0073995931 #> tax59  -0.109046970 -0.1095652807 #> tax60   0.095507667  0.1076421738 #> tax61   0.202275946  0.2495052814 #> tax62   0.028492825  0.0476537091 #> tax63  -0.098159552 -0.1053551038 #> tax64  -0.118370737 -0.1503392174 #> tax65   0.063651164  0.0428808530 #> tax66   0.089641662  0.0824896608 #> tax67  -0.456824121 -0.4628195990 #> tax68  -0.160371860 -0.1733627433 #> tax69   0.197886444  0.2083867277 #> tax70   0.009934085  0.0117039908 #> tax71  -0.077762059 -0.0819431373 #> tax72  -0.575128374 -0.5797934305 #> tax73   0.174955868  0.1707061813 #> tax74  -0.127778598 -0.1402542364 #> tax75   0.213977155  0.2098576682 #> tax76   0.013142052 -0.0001757145 #> tax77  -0.135754392 -0.1423047270 #> tax78   0.040299382  0.0505805470 #> tax79  -0.331365143 -0.3401576337 #> tax80  -0.123183057 -0.1555313950 #> tax81   0.055552324  0.0761967841 #> tax82  -0.062530132 -0.0443527926 #> tax83  -0.274571260 -0.2915753410 #> tax84   0.006102903 -0.0024762948 #> tax85  -0.311122145 -0.3090155976 #> tax86   0.096155189  0.0922250294 #> tax87   0.133097353  0.1267574969 #> tax88   0.273110594  0.2629119782 #> tax89   0.018138556  0.0089195115 #> tax90  -0.023081076 -0.0269181274 #> tax91  -0.396389257 -0.3952219486 #> tax92   0.255244800  0.2551714806 #> tax93  -0.097639220 -0.0872822489 #> tax94   0.241217755  0.2475347178 #> tax95  -0.178711517 -0.1803448995 #> tax96  -0.036196606 -0.0305729821 #> tax97   0.359314657  0.3695857979 #> tax98   0.075919185  0.0639193058 #> tax99   0.182476418  0.1737608001 #> tax100  0.145250786  0.1461371921"},{"path":"/reference/pd_splits.html","id":null,"dir":"Reference","previous_headings":"","what":"Mirror Splits from Partial Dependence — pd_splits","title":"Mirror Splits from Partial Dependence — pd_splits","text":"ech split, return array dimension n_taxa x 2 fits x n_lags. entry contains estimated counterfactual effect taxon lag combination across two models (fit different random sample data).","code":""},{"path":"/reference/pd_splits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mirror Splits from Partial Dependence — pd_splits","text":"","code":"pd_splits(ts, w0, w1, tr_fun, n_splits = 20, ...)"},{"path":"/reference/pd_splits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mirror Splits from Partial Dependence — pd_splits","text":"ts object class ts_inter containing time-varying microbiome community, environmental interventions, static host features data. columns element values matrix expected consecutive timepoints changing community. ts_from_dfs() helper create objects data.frames relevant information. w0 One counterfactuals compute partial dependence profiles. See steps pulses helpers generating counterfactuals. procedure concatenates counterfactuals end series computes difference forecasts. w1 One counterfactuals compute partial dependence profiles. See steps pulses helpers generating counterfactuals. procedure concatenates counterfactuals end series computes difference forecasts. tr_fun function can used train random splits. examples package, use anonymous function fills chosen hyperparameters mbtransfer. example \\(x) mbtransfer(x, P =  1, Q = 1) fit lag-1 transfer function model random splits.","code":""},{"path":"/reference/pd_splits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mirror Splits from Partial Dependence — pd_splits","text":"","code":"data(sim_ts) w0 <- cbind(sim_ts[[1]]@interventions, matrix(0, nrow = 1, ncol = 3)) w1 <- cbind(sim_ts[[1]]@interventions, matrix(1, nrow = 1, ncol = 3)) pd_result <- pd_splits(sim_ts, w0, w1, \\(x) mbtransfer(x, 1, 1, nrounds = 10), n_splits = 1) #> Training models for split 1/1"},{"path":"/reference/pivot_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Joined ts dfs — pivot_ts","title":"Joined ts dfs — pivot_ts","text":"Joined ts dfs","code":""},{"path":"/reference/pivot_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joined ts dfs — pivot_ts","text":"","code":"pivot_ts(ts)"},{"path":"/reference/pivot_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joined ts dfs — pivot_ts","text":"","code":"data(sim_ts) pivoted <- pivot_ts(sim_ts) #> Joining with `by = join_by(sample)` #> Joining with `by = join_by(sample)` #> Joining with `by = join_by(subject)` head(pivoted) #> # A tibble: 6 × 7 #>   taxon sample value subject  time    P1    V1 #>   <chr> <glue> <dbl> <chr>   <dbl> <dbl> <dbl> #> 1 tax1  S1_T1      5 S1        -11     0 0.330 #> 2 tax1  S1_T2      7 S1        -10     0 0.330 #> 3 tax1  S1_T3      5 S1         -9     0 0.330 #> 4 tax1  S1_T4      3 S1         -8     0 0.330 #> 5 tax1  S1_T5      6 S1         -7     0 0.330 #> 6 tax1  S1_T6      2 S1         -6     0 0.330"},{"path":"/reference/predict-mbtransfer_model-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction method for mbtransfer models — predict,mbtransfer_model-method","title":"Prediction method for mbtransfer models — predict,mbtransfer_model-method","text":"Prediction method mbtransfer models","code":""},{"path":"/reference/predict-mbtransfer_model-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction method for mbtransfer models — predict,mbtransfer_model-method","text":"","code":"# S4 method for mbtransfer_model predict(object, newdata)"},{"path":"/reference/predict-mbtransfer_model-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction method for mbtransfer models — predict,mbtransfer_model-method","text":"","code":"data(sim_ts) fit <- mbtransfer(sim_ts, 1, 1) sim_sub <- subset_values(sim_ts, 1:26) # remove last timepoint y_hat <- predict(fit, sim_sub) plot(values(sim_ts[[1]])[, 27], values(y_hat[[1]])[, 27], xlab = \"Truth\", ylab = \"Predicted\")"},{"path":"/reference/predictor_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Create uniform column names for patchified df — predictor_names","title":"Create uniform column names for patchified df — predictor_names","text":"Create uniform column names patchified df","code":""},{"path":"/reference/predictor_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create uniform column names for patchified df — predictor_names","text":"","code":"predictor_names(x_dim, w_dim)"},{"path":"/reference/predictor_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create uniform column names for patchified df — predictor_names","text":"","code":"data(sim_ts) predictor_names(c(2, 3), c(2, 2)) #>  [1] \"taxon1_lag3\"        \"taxon2_lag3\"        \"taxon1_lag2\"        #>  [4] \"taxon2_lag2\"        \"taxon1_lag1\"        \"taxon2_lag1\"        #>  [7] \"intervention1_lag1\" \"intervention2_lag1\" \"intervention1_lag0\" #> [10] \"intervention2_lag0\" predictor_names(c(5, 2), c(1, 1)) #>  [1] \"taxon1_lag2\"        \"taxon2_lag2\"        \"taxon3_lag2\"        #>  [4] \"taxon4_lag2\"        \"taxon5_lag2\"        \"taxon1_lag1\"        #>  [7] \"taxon2_lag1\"        \"taxon3_lag1\"        \"taxon4_lag1\"        #> [10] \"taxon5_lag1\"        \"intervention1_lag0\""},{"path":"/reference/predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Predictor Matrix — predictors","title":"Generate a Predictor Matrix — predictors","text":"patchify_df used generate training data. test time, need patches, need construct regressors immediate past. matched model's original training data used generate predictions.","code":""},{"path":"/reference/predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Predictor Matrix — predictors","text":"","code":"predictors(ts_inter, lags, subject, interactions = NULL)"},{"path":"/reference/predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Predictor Matrix — predictors","text":"ts_inter object class ts_inter_single generate sliding windows. lags vector specifying P Q trained mbtransfer model. subject static data frame subject-level variables. concatenated time-varying intervention taxonomic covariates making predictions. analogous training process.","code":""},{"path":"/reference/predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Predictor Matrix — predictors","text":"","code":"data(sim_ts) ts <- subset_values(sim_ts, 1:5) predictors(ts[[1]], c(2, 2), NULL) #>      taxon1_lag2 taxon2_lag2 taxon3_lag2 taxon4_lag2 taxon5_lag2 taxon6_lag2 #> [1,]           3           3          25           7          13           1 #>      taxon7_lag2 taxon8_lag2 taxon9_lag2 taxon10_lag2 taxon11_lag2 taxon12_lag2 #> [1,]           6          19          14           15           21           22 #>      taxon13_lag2 taxon14_lag2 taxon15_lag2 taxon16_lag2 taxon17_lag2 #> [1,]           21            5           18            8            6 #>      taxon18_lag2 taxon19_lag2 taxon20_lag2 taxon21_lag2 taxon22_lag2 #> [1,]            4           10            0            4           13 #>      taxon23_lag2 taxon24_lag2 taxon25_lag2 taxon26_lag2 taxon27_lag2 #> [1,]           21            1            7            7            6 #>      taxon28_lag2 taxon29_lag2 taxon30_lag2 taxon31_lag2 taxon32_lag2 #> [1,]            5            0            5            4            8 #>      taxon33_lag2 taxon34_lag2 taxon35_lag2 taxon36_lag2 taxon37_lag2 #> [1,]           10           10            1           11            4 #>      taxon38_lag2 taxon39_lag2 taxon40_lag2 taxon41_lag2 taxon42_lag2 #> [1,]            7            1            7            8            7 #>      taxon43_lag2 taxon44_lag2 taxon45_lag2 taxon46_lag2 taxon47_lag2 #> [1,]            2            9            7            6            7 #>      taxon48_lag2 taxon49_lag2 taxon50_lag2 taxon51_lag2 taxon52_lag2 #> [1,]           24           17           19           11            3 #>      taxon53_lag2 taxon54_lag2 taxon55_lag2 taxon56_lag2 taxon57_lag2 #> [1,]           10           32            8            5           17 #>      taxon58_lag2 taxon59_lag2 taxon60_lag2 taxon61_lag2 taxon62_lag2 #> [1,]            8           14            9           17           12 #>      taxon63_lag2 taxon64_lag2 taxon65_lag2 taxon66_lag2 taxon67_lag2 #> [1,]            2           13            9           11           21 #>      taxon68_lag2 taxon69_lag2 taxon70_lag2 taxon71_lag2 taxon72_lag2 #> [1,]            9            3           10            4            5 #>      taxon73_lag2 taxon74_lag2 taxon75_lag2 taxon76_lag2 taxon77_lag2 #> [1,]           16            2            3            4           16 #>      taxon78_lag2 taxon79_lag2 taxon80_lag2 taxon81_lag2 taxon82_lag2 #> [1,]            3            8            0           12            5 #>      taxon83_lag2 taxon84_lag2 taxon85_lag2 taxon86_lag2 taxon87_lag2 #> [1,]           16           12            2            6           11 #>      taxon88_lag2 taxon89_lag2 taxon90_lag2 taxon91_lag2 taxon92_lag2 #> [1,]            5            3            1           13            8 #>      taxon93_lag2 taxon94_lag2 taxon95_lag2 taxon96_lag2 taxon97_lag2 #> [1,]           31            6           31           20           16 #>      taxon98_lag2 taxon99_lag2 taxon100_lag2 taxon1_lag1 taxon2_lag1 #> [1,]            0           10             1           6           7 #>      taxon3_lag1 taxon4_lag1 taxon5_lag1 taxon6_lag1 taxon7_lag1 taxon8_lag1 #> [1,]           8          23           7          15          27          13 #>      taxon9_lag1 taxon10_lag1 taxon11_lag1 taxon12_lag1 taxon13_lag1 #> [1,]          15           33           11           14           12 #>      taxon14_lag1 taxon15_lag1 taxon16_lag1 taxon17_lag1 taxon18_lag1 #> [1,]            7           13            1           11            7 #>      taxon19_lag1 taxon20_lag1 taxon21_lag1 taxon22_lag1 taxon23_lag1 #> [1,]            9            5            8            1            3 #>      taxon24_lag1 taxon25_lag1 taxon26_lag1 taxon27_lag1 taxon28_lag1 #> [1,]            4            4            4           22           12 #>      taxon29_lag1 taxon30_lag1 taxon31_lag1 taxon32_lag1 taxon33_lag1 #> [1,]            0            6           14            0            2 #>      taxon34_lag1 taxon35_lag1 taxon36_lag1 taxon37_lag1 taxon38_lag1 #> [1,]           13           14           17           14            4 #>      taxon39_lag1 taxon40_lag1 taxon41_lag1 taxon42_lag1 taxon43_lag1 #> [1,]            2            7           10           16           10 #>      taxon44_lag1 taxon45_lag1 taxon46_lag1 taxon47_lag1 taxon48_lag1 #> [1,]           32           21            6            5            8 #>      taxon49_lag1 taxon50_lag1 taxon51_lag1 taxon52_lag1 taxon53_lag1 #> [1,]           12           19            4           19            5 #>      taxon54_lag1 taxon55_lag1 taxon56_lag1 taxon57_lag1 taxon58_lag1 #> [1,]           26           16           17            8            3 #>      taxon59_lag1 taxon60_lag1 taxon61_lag1 taxon62_lag1 taxon63_lag1 #> [1,]           17           26            9            7            4 #>      taxon64_lag1 taxon65_lag1 taxon66_lag1 taxon67_lag1 taxon68_lag1 #> [1,]           25           11            6            4           11 #>      taxon69_lag1 taxon70_lag1 taxon71_lag1 taxon72_lag1 taxon73_lag1 #> [1,]            2            7           31           13           18 #>      taxon74_lag1 taxon75_lag1 taxon76_lag1 taxon77_lag1 taxon78_lag1 #> [1,]           16            5           21            2           22 #>      taxon79_lag1 taxon80_lag1 taxon81_lag1 taxon82_lag1 taxon83_lag1 #> [1,]           14           11            9           11            9 #>      taxon84_lag1 taxon85_lag1 taxon86_lag1 taxon87_lag1 taxon88_lag1 #> [1,]           10            0           12            6           12 #>      taxon89_lag1 taxon90_lag1 taxon91_lag1 taxon92_lag1 taxon93_lag1 #> [1,]            8           17            4           25           14 #>      taxon94_lag1 taxon95_lag1 taxon96_lag1 taxon97_lag1 taxon98_lag1 #> [1,]            8            9            4           15           12 #>      taxon99_lag1 taxon100_lag1 intervention1_lag1 intervention1_lag0 #> [1,]            7            16                  0                  0"},{"path":"/reference/pulses.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypothetical Pulse Interventions — pulses","title":"Hypothetical Pulse Interventions — pulses","text":"Create counterfactual perturbations specific 0/1 intervention total length patterns.","code":""},{"path":"/reference/pulses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypothetical Pulse Interventions — pulses","text":"","code":"pulses(p_states, lags = 1, L = 3, w_star = c(0, 1))"},{"path":"/reference/pulses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypothetical Pulse Interventions — pulses","text":"lags time length interventions generate. L total length returned, including intervention non-intervention timepoints w_star unique values include intervention. Defaults 1/0, respectively. p_stats list specifying row names whether include interventions. name set TRUE include intervention effects, FALSE .","code":""},{"path":"/reference/pulses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hypothetical Pulse Interventions — pulses","text":"","code":"library(mbtransfer) pulses(c(\"P1\" = TRUE), 1, 4) #> [[1]] #>    Tn_1 Tn_2 Tn_3 Tn_4 #> P1    0    0    0    0 #>  #> [[2]] #>    Tn_1 Tn_2 Tn_3 Tn_4 #> P1    0    0    0    1 #>  pulses(c(\"P1\" = TRUE), 1:3, 4) #> [[1]] #>    Tn_1 Tn_2 Tn_3 Tn_4 #> P1    0    0    0    0 #>  #> [[2]] #>    Tn_1 Tn_2 Tn_3 Tn_4 #> P1    0    0    0    0 #>  #> [[3]] #>    Tn_1 Tn_2 Tn_3 Tn_4 #> P1    0    0    0    0 #>  #> [[4]] #>    Tn_1 Tn_2 Tn_3 Tn_4 #> P1    0    0    0    1 #>  #> [[5]] #>    Tn_1 Tn_2 Tn_3 Tn_4 #> P1    0    0    1    0 #>  #> [[6]] #>    Tn_1 Tn_2 Tn_3 Tn_4 #> P1    0    1    0    0 #>"},{"path":"/reference/replace_inter_.html","id":null,"dir":"Reference","previous_headings":"","what":"ts is a single element of a ts_inter class — replace_inter_","title":"ts is a single element of a ts_inter class — replace_inter_","text":"ts single element ts_inter class","code":""},{"path":"/reference/replace_inter_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ts is a single element of a ts_inter class — replace_inter_","text":"","code":"replace_inter_(ts, new_inter, start_ix = NULL)"},{"path":"/reference/sample_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly subset a ts_inter object — sample_ts","title":"Randomly subset a ts_inter object — sample_ts","text":"times want randomly sample patches across timepoints subjects. helper function random sampling adapted ts_inter objects, subsetting taxa intervention timepoints simultaneously.","code":""},{"path":"/reference/sample_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly subset a ts_inter object — sample_ts","text":"","code":"sample_ts(ts, n, patch_len = 5, intervention_len = 0)"},{"path":"/reference/sample_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly subset a ts_inter object — sample_ts","text":"ts ts_inter object whose random patches want sample. n number randomly sampled time series return. patch_len length randomly sampled patches intervention_len pad @time slot extra intervention_len set timepoints. Defaults 0.","code":""},{"path":"/reference/sample_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly subset a ts_inter object — sample_ts","text":"","code":"data(sim_ts) sample_ts(sim_ts, 10, 4, 1) #> # A ts_inter object | 100 taxa | 10 subjects | 4.00 ± 0.00 timepoints: #>  #> S21: #>      S21_T22 S21_T23 S21_T24 S21_T25   #> tax1      10       8       7       6 … #> tax2      13      17       1      19 … #> tax3      13      14       7       2 … #> tax4       6      14      10      12 … #>            ⋮       ⋮       ⋮       ⋮ ⋱ #>  #> S28: #>      S28_T4 S28_T5 S28_T6 S28_T7   #> tax1      2      1      3     12 … #> tax2     10      6     14      0 … #> tax3     26      2     23     16 … #> tax4     28      8      4      4 … #>           ⋮      ⋮      ⋮      ⋮ ⋱ #>  #> S18: #>      S18_T18 S18_T19 S18_T20 S18_T21   #> tax1       9       8       4       1 … #> tax2       8       6      14      44 … #> tax3       2      12      16       2 … #> tax4       5      11       7      41 … #>            ⋮       ⋮       ⋮       ⋮ ⋱ #>  #> and 7 more subjects."},{"path":"/reference/select_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Significant Taxa using Mirror Statistics — select_taxa","title":"Significant Taxa using Mirror Statistics — select_taxa","text":"selects taxa data splitting procedure. retrains mbtransfer model across random splits data. Partial dependence profiles pairs splits compared one another -- agree given feature, feature considered likely true effect response. function supports inference effects interventions taxa responses, principle apply estimate significant relationships taxa.","code":""},{"path":"/reference/select_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Significant Taxa using Mirror Statistics — select_taxa","text":"","code":"select_taxa(ts, w0, w1, tr_fun, qvalue = 0.2, ...)"},{"path":"/reference/select_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Significant Taxa using Mirror Statistics — select_taxa","text":"ts object class ts_inter containing time-varying microbiome community, environmental interventions, static host features data. columns element values matrix expected consecutive timepoints changing community. ts_from_dfs() helper create objects data.frames relevant information. w0 One counterfactuals compute partial dependence profiles. See steps pulses helpers generating counterfactuals. procedure concatenates counterfactuals end series computes difference forecasts. w1 One counterfactuals compute partial dependence profiles. See steps pulses helpers generating counterfactuals. procedure concatenates counterfactuals end series computes difference forecasts. tr_fun function can used train random splits. examples package, use anonymous function fills chosen hyperparameters mbtransfer. example \\(x) mbtransfer(x, P = 1, Q = 1) fit lag-1 transfer function model random splits. qvalue target False Discovery Rate. Defaults 0.2.","code":""},{"path":"/reference/select_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Significant Taxa using Mirror Statistics — select_taxa","text":"","code":"data(sim_ts) w0 <- cbind(sim_ts[[1]]@interventions, matrix(0, nrow = 1, ncol = 3)) w1 <- cbind(sim_ts[[1]]@interventions, matrix(1, nrow = 1, ncol = 3)) S <- select_taxa(sim_ts, w0, w1, \\(x) mbtransfer(x, 1, 1, nrounds = 10), n_splits = 1) #> Training models for split 1/1 #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf"},{"path":"/reference/sim_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Time Series — sim_ts","title":"Simulated Time Series — sim_ts","text":"data generated according negative binomial vector autoregressive model. specific generative mechanism described Section 3.1 \"mbtransfer: Microbiome Intervention Analysis using Transfer Functions Mirror Statistics\" Sankaran Jeganathan.","code":""},{"path":"/reference/sim_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Time Series — sim_ts","text":"","code":"sim_ts"},{"path":"/reference/sim_ts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Time Series — sim_ts","text":"ts_inter class 50 subjets 30 timepoints .","code":""},{"path":"/reference/sim_ts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Time Series — sim_ts","text":"run sim_input_004.rda collection, https://drive.google.com/drive/folders/19mDoKbT2qvO9AlRdn_wQKBbqNh8Cx22F reshaped interpolated script: https://github.com/krisrs1128/microbiome_interventions/blob/main/scripts/forecasting_metrics.Rmd","code":""},{"path":"/reference/steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypothetical Step Interventions — steps","title":"Hypothetical Step Interventions — steps","text":"Hypothetical Step Interventions","code":""},{"path":"/reference/steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypothetical Step Interventions — steps","text":"","code":"steps(p_states, starts = 1, lengths = 1:3, L = 3, w_star = c(0, 1))"},{"path":"/reference/steps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hypothetical Step Interventions — steps","text":"","code":"steps(c(\"P1\" = TRUE), 1:3, 2:3, 4) #> [[1]] #>    t1 t2 t3 t4 #> P1  0  0  0  0 #>  #> [[2]] #>    t1 t2 t3 t4 #> P1  1  1  0  0 #>  #> [[3]] #>    t1 t2 t3 t4 #> P1  1  1  1  0 #>  #> [[4]] #>    t1 t2 t3 t4 #> P1  0  1  1  0 #>  #> [[5]] #>    t1 t2 t3 t4 #> P1  0  1  1  1 #>  #> [[6]] #>    t1 t2 t3 t4 #> P1  0  0  1  1 #>"},{"path":"/reference/subset_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset values of a ts object — subset_values","title":"Subset values of a ts object — subset_values","text":"helper filter number timepoints across values slots ts_inter class.","code":""},{"path":"/reference/subset_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset values of a ts object — subset_values","text":"","code":"subset_values(ts, ix)"},{"path":"/reference/subset_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset values of a ts object — subset_values","text":"","code":"data(sim_ts) subset_values(sim_ts, 1:2) #> # A ts_inter object | 100 taxa | 50 subjects | 2.00 ± 0.00 timepoints: #>  #> S1: #>      S1_T1 S1_T2   #> tax1     5     7 … #> tax2    23    43 … #>          ⋮     ⋮ ⋱ #>  #> S2: #>      S2_T1 S2_T2   #> tax1     6     4 … #> tax2    53    12 … #>          ⋮     ⋮ ⋱ #>  #> S3: #>      S3_T1 S3_T2   #> tax1     5     3 … #> tax2     9    13 … #>          ⋮     ⋮ ⋱ #>  #> and 47 more subjects. subset_values(sim_ts, 4:8) #> # A ts_inter object | 100 taxa | 50 subjects | 5.00 ± 0.00 timepoints: #>  #> S1: #>      S1_T4 S1_T5 S1_T6 S1_T7   #> tax1     3     6     2     7 … #> tax2     3     7    14     2 … #> tax3    25     8    13    29 … #> tax4     7    23    13    13 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> S2: #>      S2_T4 S2_T5 S2_T6 S2_T7   #> tax1     8     4     6     8 … #> tax2     1     1     5    10 … #> tax3     5    13    12     9 … #> tax4    15    14    28     8 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> S3: #>      S3_T4 S3_T5 S3_T6 S3_T7   #> tax1     5    11    10     6 … #> tax2     3     3     7     5 … #> tax3     6    17     2     9 … #> tax4     8    18     3    16 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> and 47 more subjects."},{"path":"/reference/time_lags.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the time lags over which a model was trained — time_lags","title":"Detect the time lags over which a model was trained — time_lags","text":"helper determining P, Q associated fitted mbtransfer model.","code":""},{"path":"/reference/time_lags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the time lags over which a model was trained — time_lags","text":"","code":"time_lags(fit)"},{"path":"/reference/time_lags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect the time lags over which a model was trained — time_lags","text":"","code":"data(sim_ts) fit <- mbtransfer(sim_ts) time_lags(fit@parameters[[1]]) #> [1] 1 1"},{"path":"/reference/ts_from_dfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a  ts — ts_from_dfs","title":"Build a  ts — ts_from_dfs","text":"Build  ts","code":""},{"path":"/reference/ts_from_dfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a  ts — ts_from_dfs","text":"","code":"ts_from_dfs(reads, interventions, metadata, subject_data = NULL)"},{"path":"/reference/ts_from_dfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a  ts — ts_from_dfs","text":"","code":"library(readr) library(tibble) subject <- read_csv(\"https://figshare.com/ndownloader/files/40275934/subject.csv\") #> Rows: 20 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (2): subject, diet #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. interventions <- read_csv(\"https://figshare.com/ndownloader/files/40279171/interventions.csv\") |>   column_to_rownames(\"sample\") #> Rows: 236 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): sample #> dbl (2): Plant, Animal #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. reads <- read_csv(\"https://figshare.com/ndownloader/files/40279108/reads.csv\") |>   column_to_rownames(\"sample\") #> Rows: 236 Columns: 192 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr   (1): sample #> dbl (191): Otu000001, Otu000002, Otu000003, Otu000004, Otu000005, Otu000006,... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. samples <- read_csv(\"https://figshare.com/ndownloader/files/40275943/samples.csv\") #> Rows: 236 Columns: 4 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (3): sample, subject, condition #> dbl (1): time #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ts <- as.matrix(reads) |>   ts_from_dfs(interventions, samples, subject) #> Joining with `by = join_by(subject)` ts #> # A ts_inter object | 191 taxa | 20 subjects | 11.80 ± 3.57 timepoints: #>  #> Plant5: #>             DD53 DD111  DD24  DD29   #> Otu000001 10.218 9.149 8.392 9.399 … #> Otu000002      0     0  5.15 8.454 … #> Otu000003  6.413     0 3.509  3.57 … #> Otu000004   7.46 6.997 6.855  8.04 … #>                ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> Plant7: #>            DD79  DD34  DD72 DD144   #> Otu000001 9.311 9.368 8.052 9.734 … #> Otu000002     0     0 4.838 1.844 … #> Otu000003 7.201 7.575 5.674 7.127 … #> Otu000004 9.375 9.591 8.313 9.435 … #>               ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> Plant4: #>            DD31 DD146  DD38 DD138   #> Otu000001 8.176 8.512 8.284 8.466 … #> Otu000002 4.545     0     0     0 … #> Otu000003 8.471 8.226 7.681 6.527 … #> Otu000004     0     0     0     0 … #>               ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> and 17 more subjects."},{"path":"/reference/ts_inter-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class representing a collection of time series under environmental shifts — ts_inter-class","title":"An S4 class representing a collection of time series under environmental shifts — ts_inter-class","text":"ts_inter_single represents shifts single subject, ts_inter includes shifts across collection subjects. includes additional slot, subject_data store non-time-varying subject metadata.","code":""},{"path":"/reference/ts_inter-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class representing a collection of time series under environmental shifts — ts_inter-class","text":"series list ts_inter_single objects, representing interventions compositional responses subject. subject_data optional data.frame storing static host-level metadata associated series.","code":""},{"path":"/reference/ts_inter-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 class representing a collection of time series under environmental shifts — ts_inter-class","text":"","code":"data(sim_ts) sim_ts #> # A ts_inter object | 100 taxa | 50 subjects | 27.00 ± 0.00 timepoints: #>  #> S1: #>      S1_T1 S1_T2 S1_T3 S1_T4   #> tax1     5     7     5     3 … #> tax2    23    43    19     3 … #> tax3    17    40    42    25 … #> tax4    30    12    15     7 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> S2: #>      S2_T1 S2_T2 S2_T3 S2_T4   #> tax1     6     4    11     8 … #> tax2    53    12    15     1 … #> tax3     6     8    23     5 … #> tax4    24    11    12    15 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> S3: #>      S3_T1 S3_T2 S3_T3 S3_T4   #> tax1     5     3     6     5 … #> tax2     9    13    26     3 … #> tax3    60    13     4     6 … #> tax4    22    17     6     8 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #>  #> and 47 more subjects."},{"path":"/reference/ts_inter_single-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a single subject's series — ts_inter_single-class","title":"An S4 class to represent a single subject's series — ts_inter_single-class","text":"Taxonomic abundances, binary/continuous interventions, underlying timepoints single subject stored unified data structure. ts_inter object list ts_inter_single classes (together wtih static subject data).","code":""},{"path":"/reference/ts_inter_single-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a single subject's series — ts_inter_single-class","text":"values matrix whose rows taxa whose columns samples. time vector timepoints associated samples values. interventions matrix whose rows perturbations, columns samples, values either binary interventions continuous input series, representing value exogenous influence.","code":""},{"path":"/reference/ts_inter_single-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 class to represent a single subject's series — ts_inter_single-class","text":"","code":"data(sim_ts) sim_ts[[1]] #> # A ts_inter_single object | 1 taxa | 27 timepoints: #> taxa: #>      S1_T1 S1_T2 S1_T3 S1_T4   #> tax1     5     7     5     3 … #> tax2    23    43    19     3 … #> tax3    17    40    42    25 … #> tax4    30    12    15     7 … #>          ⋮     ⋮     ⋮     ⋮ ⋱ #> interventions: #>    S1_T1 S1_T2 S1_T3 S1_T4   #> P1     0     0     0     0 …"}]
